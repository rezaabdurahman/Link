# Docker Compose overrides for Production environment
version: '3.8'

services:
  ai-svc:
    image: ${DOCKER_REGISTRY}ai-svc:${VERSION}
    build: null  # Don't build in production, use pre-built image
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=warn
      - DB_SSL_MODE=require
      - RATE_LIMIT_REQUESTS_PER_MINUTE=100
      - RATE_LIMIT_AI_REQUESTS_PER_MINUTE=15
      - CORS_ALLOWED_ORIGINS=https://linkchatsummary.com,https://app.linkchatsummary.com
    deploy:
      mode: replicated
      replicas: 3
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-svc-prod.rule=Host(`api.linkchatsummary.com`)"
      - "traefik.http.routers.ai-svc-prod.tls=true"
      - "traefik.http.routers.ai-svc-prod.tls.certresolver=letsencrypt"
      - "traefik.http.routers.ai-svc-prod.middlewares=rate-limit,secure-headers"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    environment:
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256 --encoding=UTF8 --locale=en_US.UTF-8
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_connections=200
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --tcp-keepalive 60
      --timeout 300
      --tcp-backlog 511
      --databases 16
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Disable development services
  redis-commander:
    profiles:
      - disabled

  # Production monitoring
  prometheus:
    profiles:
      - production
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    profiles:
      - production
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=https://monitoring.linkchatsummary.com
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_LOG_MODE=file
      - GF_LOG_LEVEL=warn
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production log aggregation (optional)
  loki:
    image: grafana/loki:latest
    container_name: loki-${ENVIRONMENT:-prod}
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
    networks:
      - ai-network
    profiles:
      - production
      - logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Production log shipper (optional)
  promtail:
    image: grafana/promtail:latest
    container_name: promtail-${ENVIRONMENT:-prod}
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - ai-network
    profiles:
      - production
      - logging
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

volumes:
  loki-data:
    name: loki-data-${ENVIRONMENT:-prod}
    labels:
      - "com.docker.compose.volume=loki-data"
      - "com.docker.compose.environment=${ENVIRONMENT:-production}"
