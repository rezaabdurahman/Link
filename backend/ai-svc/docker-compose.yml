# Docker Compose for AI Service
# Supports development, staging, and production environments
version: '3.8'

services:
  # AI Service - Main application
  ai-svc:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: ${VERSION:-latest}
        BUILD_TIME: ${BUILD_TIME:-}
    image: ${DOCKER_REGISTRY:-}ai-svc:${VERSION:-latest}
    container_name: ai-svc-${ENVIRONMENT:-dev}
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-8081}:8081"
      - "${METRICS_PORT:-9090}:9090"  # Prometheus metrics
    environment:
      # Server Configuration
      - SERVER_PORT=8081
      - SERVER_HOST=0.0.0.0
      
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-ai_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_SSL_MODE=${DB_SSL_MODE:-disable}
      - DB_MAX_OPEN_CONNS=${DB_MAX_OPEN_CONNS:-25}
      - DB_MAX_IDLE_CONNS=${DB_MAX_IDLE_CONNS:-25}
      - DB_CONN_MAX_LIFETIME=${DB_CONN_MAX_LIFETIME:-300s}
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-1}
      
      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      
      # AI Service Configuration
      - AI_PROVIDER=${AI_PROVIDER:-openai}
      - AI_API_KEY=${AI_API_KEY}
      - AI_MODEL=${AI_MODEL:-gpt-4}
      - AI_MAX_TOKENS=${AI_MAX_TOKENS:-2048}
      - AI_TEMPERATURE=${AI_TEMPERATURE:-0.7}
      - AI_TIMEOUT=${AI_TIMEOUT:-30s}
      - AI_MAX_RETRIES=${AI_MAX_RETRIES:-3}
      
      # Chat Service Configuration
      - CHAT_SERVICE_URL=${CHAT_SERVICE_URL:-http://chat-service:8080}
      - CHAT_SERVICE_TIMEOUT=${CHAT_SERVICE_TIMEOUT:-10s}
      - CHAT_SERVICE_MAX_RETRIES=${CHAT_SERVICE_MAX_RETRIES:-3}
      - CHAT_SERVICE_RETRY_DELAY=${CHAT_SERVICE_RETRY_DELAY:-100ms}
      - CHAT_SERVICE_RETRY_BACKOFF=${CHAT_SERVICE_RETRY_BACKOFF:-2.0}
      - CHAT_SERVICE_CIRCUIT_BREAKER_ENABLED=${CHAT_SERVICE_CIRCUIT_BREAKER_ENABLED:-true}
      - CHAT_SERVICE_CIRCUIT_BREAKER_TIMEOUT=${CHAT_SERVICE_CIRCUIT_BREAKER_TIMEOUT:-30s}
      - CHAT_SERVICE_CIRCUIT_BREAKER_MAX_FAILS=${CHAT_SERVICE_CIRCUIT_BREAKER_MAX_FAILS:-5}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
      - CORS_ALLOWED_METHODS=${CORS_ALLOWED_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      - CORS_ALLOWED_HEADERS=${CORS_ALLOWED_HEADERS:-Accept,Authorization,Content-Type,X-CSRF-Token,X-User-ID,X-User-Email,X-User-Name}
      
      # Rate Limiting
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}
      - RATE_LIMIT_AI_REQUESTS_PER_MINUTE=${RATE_LIMIT_AI_REQUESTS_PER_MINUTE:-10}
      
      # Health Check Configuration
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30s}
      
      # Monitoring
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=9090
      
      # Environment
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - ai-network
    volumes:
      - ai-logs:/app/logs
    labels:
      - "com.docker.compose.service=ai-svc"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-${ENVIRONMENT:-dev}
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-ai_db}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=${POSTGRES_INITDB_ARGS:---auth-host=scram-sha-256}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-ai_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ai-network
    labels:
      - "com.docker.compose.service=postgres"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-${ENVIRONMENT:-dev}
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-}
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ai-network
    labels:
      - "com.docker.compose.service=redis"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"

  # Redis Commander (Development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander-${ENVIRONMENT:-dev}
    restart: unless-stopped
    ports:
      - "${REDIS_COMMANDER_PORT:-8082}:8081"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai-network
    profiles:
      - dev
      - development
    labels:
      - "com.docker.compose.service=redis-commander"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"

  # Prometheus (Monitoring - Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-${ENVIRONMENT:-dev}
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    depends_on:
      - ai-svc
    networks:
      - ai-network
    profiles:
      - monitoring
    labels:
      - "com.docker.compose.service=prometheus"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"

  # Grafana (Monitoring - Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-${ENVIRONMENT:-dev}
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - ai-network
    profiles:
      - monitoring
    labels:
      - "com.docker.compose.service=grafana"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"

networks:
  ai-network:
    driver: bridge
    name: ai-network-${ENVIRONMENT:-dev}
    labels:
      - "com.docker.compose.network=ai-network"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"

volumes:
  postgres-data:
    name: postgres-data-${ENVIRONMENT:-dev}
    labels:
      - "com.docker.compose.volume=postgres-data"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"
  
  redis-data:
    name: redis-data-${ENVIRONMENT:-dev}
    labels:
      - "com.docker.compose.volume=redis-data"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"
  
  ai-logs:
    name: ai-logs-${ENVIRONMENT:-dev}
    labels:
      - "com.docker.compose.volume=ai-logs"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"
  
  prometheus-data:
    name: prometheus-data-${ENVIRONMENT:-dev}
    labels:
      - "com.docker.compose.volume=prometheus-data"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"
  
  grafana-data:
    name: grafana-data-${ENVIRONMENT:-dev}
    labels:
      - "com.docker.compose.volume=grafana-data"
      - "com.docker.compose.environment=${ENVIRONMENT:-development}"
