name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ai_svc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod tidy

    - name: Install testing tools
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run linters
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

    - name: Run security scan
      run: gosec ./...

    - name: Check for vulnerabilities
      run: govulncheck ./...

    - name: Run unit tests
      run: make test-unit

    - name: Run integration tests
      run: make test-integration
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: ai_svc_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Run tests with coverage
      run: make test-coverage-check
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: ai_svc_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Generate coverage badge data
      run: make test-coverage-badge
      env:
        CI: true
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: ai_svc_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: ai-svc-coverage
        fail_ci_if_error: true

    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: coverage.out
        format: golang

    - name: Run race condition tests
      run: make test-race
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: ai_svc_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Run benchmarks
      run: make bench

  build:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build application
      run: make build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/ai-svc
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=AI Service
          org.opencontainers.image.description=AI-powered chat summarization service
          org.opencontainers.image.vendor=Link Chat Summary

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_TIME=${{ steps.meta.outputs.json }}

    - name: Run container smoke test
      run: |
        # Test the built image
        IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/ai-svc:${{ github.sha }}"
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          IMAGE_TAG="ai-svc:pr-${{ github.event.number }}"
        fi
        
        echo "Testing image: $IMAGE_TAG"
        
        # Start container in background with health check
        docker run -d --name ai-svc-test -p 8081:8081 \
          -e DB_HOST=localhost \
          -e DB_PORT=5432 \
          -e DB_USER=test \
          -e DB_PASSWORD=test \
          -e DB_NAME=test \
          -e REDIS_HOST=localhost \
          -e REDIS_PORT=6379 \
          -e LOG_LEVEL=debug \
          $IMAGE_TAG || true
        
        # Wait for health check (max 30 seconds)
        echo "Waiting for container health check..."
        for i in {1..30}; do
          if docker exec ai-svc-test wget --no-verbose --tries=1 --spider http://localhost:8081/health 2>/dev/null; then
            echo "Health check passed after ${i} seconds"
            break
          fi
          sleep 1
        done
        
        # Show container logs for debugging
        echo "Container logs:"
        docker logs ai-svc-test || true
        
        # Check if container is running
        docker ps | grep ai-svc-test || echo "Container not running (expected for smoke test without dependencies)"
        
        # Clean up
        docker rm -f ai-svc-test || true

    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  deploy-staging:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build, security]
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying ai-svc:${{ github.sha }} to staging environment"
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        # Add your staging deployment commands here
        # This could include updating docker-compose files, 
        # deploying to Kubernetes, or triggering other deployment processes

  deploy-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build, security]
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying ai-svc:${{ github.sha }} to production environment"
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        # Add your production deployment commands here

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ai_svc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod tidy

    - name: Run benchmarks
      run: |
        echo "Running performance benchmarks..."
        go test -bench=. -benchmem -run=^$ ./... | tee benchmark-results.txt
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: ai_svc_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Comment benchmark results
      uses: peter-evans/commit-comment@v3
      if: github.event_name == 'pull_request'
      with:
        body-path: benchmark-results.txt
        token: ${{ secrets.GITHUB_TOKEN }}
