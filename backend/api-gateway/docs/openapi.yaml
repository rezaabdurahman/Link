openapi: 3.1.0
info:
  title: Link App API Gateway
  description: |
    Unified API Gateway for the Link social platform microservices architecture.
    This gateway aggregates and manages access to all backend services including:
    - User management and authentication
    - Real-time chat and messaging
    - Location sharing and proximity
    - AI-powered insights and recommendations
    - Stories sharing (planned)
    - Social opportunities (planned)
    
    All endpoints require Bearer JWT authentication unless marked as public.
  version: 1.0.0
  contact:
    name: Link Development Team
    email: dev@linkapp.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-logo:
    url: https://linkapp.com/logo.png
    altText: Link App Logo

servers:
  - url: https://api.linkapp.com
    description: Production server
  - url: https://staging-api.linkapp.com
    description: Staging server
  - url: http://localhost:8080
    description: Development server

paths:
  # Health and System Endpoints
  /health:
    get:
      summary: Gateway Health Check
      description: Returns the health status of the API Gateway and all connected services
      operationId: getHealth
      tags:
        - System
      responses:
        '200':
          description: Health status of all services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
              example:
                status: "healthy"
                services:
                  user-svc: "healthy"
                  chat-svc: "healthy"
                  location-svc: "healthy"
                  ai-svc: "healthy"
                timestamp: "2024-08-09T12:00:00Z"

  # Authentication Endpoints (User Service)
  /auth/register:
    post:
      summary: Register New User
      description: Create a new user account
      operationId: registerUser
      tags:
        - Authentication
      security: []  # Public endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              username: "john_doe"
              email: "john@example.com"
              password: "SecurePass123!"
              first_name: "John"
              last_name: "Doe"
              date_of_birth: "1995-06-15"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      summary: User Login
      description: Authenticate user and return JWT token
      operationId: loginUser
      tags:
        - Authentication
      security: []  # Public endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "john@example.com"
              password: "SecurePass123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  # User Profile Endpoints
  /users/profile:
    get:
      summary: Get Current User Profile
      description: Get the profile of the authenticated user
      operationId: getCurrentUserProfile
      tags:
        - Users
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: Update User Profile
      description: Update the authenticated user's profile information
      operationId: updateUserProfile
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/profile/{userId}:
    get:
      summary: Get User Profile by ID
      description: Get a user's public profile information
      operationId: getUserProfile
      tags:
        - Users
      security: []  # Public endpoint
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserProfile'
        '404':
          $ref: '#/components/responses/NotFound'

  # Friends and Social Endpoints
  /users/friends:
    get:
      summary: Get Friends List
      description: Get the user's friends list
      operationId: getFriends
      tags:
        - Social
      responses:
        '200':
          description: Friends list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Friend'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/friend-requests:
    get:
      summary: Get Friend Requests
      description: Get pending friend requests for the user
      operationId: getFriendRequests
      tags:
        - Social
      responses:
        '200':
          description: Friend requests list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FriendRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Send Friend Request
      description: Send a friend request to another user
      operationId: sendFriendRequest
      tags:
        - Social
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendFriendRequestRequest'
      responses:
        '201':
          description: Friend request sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/friend-requests/{requestId}:
    put:
      summary: Respond to Friend Request
      description: Accept or decline a friend request
      operationId: respondToFriendRequest
      tags:
        - Social
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Friend request ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendRequestResponse'
      responses:
        '200':
          description: Friend request response processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Chat and Messaging Endpoints
  /chat/conversations:
    get:
      summary: Get User Conversations
      description: Get all conversations for the authenticated user
      operationId: getConversations
      tags:
        - Chat
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of conversations per page
      responses:
        '200':
          description: Conversations list
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create Conversation
      description: Create a new conversation (direct or group)
      operationId: createConversation
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConversationRequest'
      responses:
        '201':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /chat/conversations/{conversationId}:
    get:
      summary: Get Conversation Details
      description: Get details of a specific conversation
      operationId: getConversationDetails
      tags:
        - Chat
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Conversation ID
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /chat/conversations/{conversationId}/messages:
    get:
      summary: Get Conversation Messages
      description: Get messages from a conversation with pagination
      operationId: getConversationMessages
      tags:
        - Chat
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Conversation ID
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of messages per page
      responses:
        '200':
          description: Messages list
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /chat/messages:
    post:
      summary: Send Message
      description: Send a new message in a conversation
      operationId: sendMessage
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /chat/messages/{messageId}:
    put:
      summary: Edit Message
      description: Edit an existing message
      operationId: editMessage
      tags:
        - Chat
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Message ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditMessageRequest'
      responses:
        '200':
          description: Message edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete Message
      description: Delete a message
      operationId: deleteMessage
      tags:
        - Chat
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Message ID
      responses:
        '204':
          description: Message deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Location Endpoints
  /location:
    post:
      summary: Update User Location
      description: Update the user's current location
      operationId: updateLocation
      tags:
        - Location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationUpdateRequest'
      responses:
        '200':
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      summary: Delete User Location
      description: Remove user's location data
      operationId: deleteLocation
      tags:
        - Location
      responses:
        '204':
          description: Location deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'

  /location/current:
    get:
      summary: Get Current User Location
      description: Get the user's current location
      operationId: getCurrentLocation
      tags:
        - Location
      responses:
        '200':
          description: Current location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /location/nearby:
    get:
      summary: Find Nearby Users
      description: Find users near a specific location
      operationId: getNearbyUsers
      tags:
        - Location
      parameters:
        - name: latitude
          in: query
          required: true
          schema:
            type: number
            format: double
            minimum: -90
            maximum: 90
          description: Latitude coordinate
        - name: longitude
          in: query
          required: true
          schema:
            type: number
            format: double
            minimum: -180
            maximum: 180
          description: Longitude coordinate
        - name: radius
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50000
            default: 1000
          description: Search radius in meters
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Maximum number of results
        - name: friends_only
          in: query
          schema:
            type: boolean
            default: false
          description: Only show friends
      responses:
        '200':
          description: Nearby users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NearbyUsersResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # AI-Powered Features
  /ai/insights:
    get:
      summary: Get User Insights
      description: Get AI-generated insights for the current user
      operationId: getUserInsights
      tags:
        - AI
      parameters:
        - name: insight_type
          in: query
          schema:
            type: string
            enum: [personality, behavior, suggestion, trend, compatibility]
          description: Filter by insight type
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Maximum number of insights
        - name: force_refresh
          in: query
          schema:
            type: boolean
            default: false
          description: Force generation of new insights
      responses:
        '200':
          description: User insights
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIInsightsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /ai/conversation-starters:
    get:
      summary: Get Conversation Starters
      description: Get AI-generated conversation starters for the user
      operationId: getConversationStarters
      tags:
        - AI
      parameters:
        - name: target_user_id
          in: query
          schema:
            type: string
            format: uuid
          description: Target user for personalized starters
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 20
            default: 5
          description: Maximum number of starters
      responses:
        '200':
          description: Conversation starters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationStartersResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /ai/relationship-scores/{userId}:
    get:
      summary: Get Relationship Score
      description: Get AI-calculated compatibility score with another user
      operationId: getRelationshipScore
      tags:
        - AI
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Target user ID
        - name: relationship_type
          in: query
          schema:
            type: string
            enum: [friendship, romantic, professional]
            default: friendship
          description: Type of relationship to analyze
      responses:
        '200':
          description: Relationship compatibility score
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipScoreResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Timeline Endpoint (Aggregated)
  /timeline:
    get:
      summary: Get User Timeline
      description: |
        Get aggregated timeline data combining:
        - Recent stories from friends
        - Nearby social opportunities
        - AI recommendations
        - Friend activities
      operationId: getTimeline
      tags:
        - Timeline
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: Number of items per page
        - name: include_opportunities
          in: query
          schema:
            type: boolean
            default: true
          description: Include social opportunities
        - name: include_stories
          in: query
          schema:
            type: boolean
            default: true
          description: Include friend stories
      responses:
        '200':
          description: User timeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    # System Schemas
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        services:
          type: object
          additionalProperties:
            type: string
            enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
      required: [status, services, timestamp]

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        page_size:
          type: integer
          minimum: 1
        total_pages:
          type: integer
          minimum: 0
        total_count:
          type: integer
          minimum: 0
        has_next:
          type: boolean
        has_previous:
          type: boolean
      required: [page, page_size, total_pages, total_count, has_next, has_previous]

    # Authentication Schemas
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          minLength: 8
          maxLength: 128
        first_name:
          type: string
          minLength: 1
          maxLength: 100
        last_name:
          type: string
          minLength: 1
          maxLength: 100
        date_of_birth:
          type: string
          format: date
        phone_number:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        gender:
          type: string
          enum: [male, female, other, prefer_not_to_say]
      required: [username, email, password, first_name, last_name]

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required: [email, password]

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/UserProfile'
            token:
              type: string
              description: JWT access token
            expires_at:
              type: string
              format: date-time
          required: [user, token, expires_at]
      required: [success, message, data]

    # User Schemas
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        date_of_birth:
          type: string
          format: date
        phone_number:
          type: string
        gender:
          type: string
          enum: [male, female, other, prefer_not_to_say]
        bio:
          type: string
          maxLength: 500
        profile_picture_url:
          type: string
          format: uri
        is_verified:
          type: boolean
        last_seen_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, username, email, first_name, last_name, is_verified, created_at, updated_at]

    PublicUserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        bio:
          type: string
        profile_picture_url:
          type: string
          format: uri
        is_verified:
          type: boolean
        last_seen_at:
          type: string
          format: date-time
      required: [id, username, first_name, last_name, is_verified]

    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 100
        last_name:
          type: string
          minLength: 1
          maxLength: 100
        bio:
          type: string
          maxLength: 500
        phone_number:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        date_of_birth:
          type: string
          format: date
        gender:
          type: string
          enum: [male, female, other, prefer_not_to_say]
        profile_picture_url:
          type: string
          format: uri

    # Social Schemas
    Friend:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        profile_picture_url:
          type: string
          format: uri
        is_online:
          type: boolean
        last_seen_at:
          type: string
          format: date-time
        friendship_since:
          type: string
          format: date-time
      required: [id, username, first_name, last_name, is_online, friendship_since]

    FriendRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        requester:
          $ref: '#/components/schemas/PublicUserProfile'
        addressee:
          $ref: '#/components/schemas/PublicUserProfile'
        status:
          type: string
          enum: [pending, accepted, declined, blocked]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, requester, addressee, status, created_at, updated_at]

    SendFriendRequestRequest:
      type: object
      properties:
        addressee_id:
          type: string
          format: uuid
      required: [addressee_id]

    FriendRequestResponse:
      type: object
      properties:
        action:
          type: string
          enum: [accept, decline]
      required: [action]

    # Chat Schemas
    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [direct, group]
        title:
          type: string
        description:
          type: string
        creator_id:
          type: string
          format: uuid
        participant_count:
          type: integer
          minimum: 1
        last_message:
          $ref: '#/components/schemas/Message'
        last_activity_at:
          type: string
          format: date-time
        unread_count:
          type: integer
          minimum: 0
        is_muted:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, type, creator_id, participant_count, last_activity_at, unread_count, is_muted, created_at, updated_at]

    ConversationDetails:
      allOf:
        - $ref: '#/components/schemas/Conversation'
        - type: object
          properties:
            participants:
              type: array
              items:
                $ref: '#/components/schemas/ConversationParticipant'
          required: [participants]

    ConversationParticipant:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        profile_picture_url:
          type: string
          format: uri
        role:
          type: string
          enum: [admin, member]
        joined_at:
          type: string
          format: date-time
        is_muted:
          type: boolean
        last_read_message_id:
          type: string
          format: uuid
      required: [user_id, username, first_name, last_name, role, joined_at, is_muted]

    CreateConversationRequest:
      type: object
      properties:
        type:
          type: string
          enum: [direct, group]
        title:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        participant_ids:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
          maxItems: 100
      required: [type, participant_ids]

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        conversation_id:
          type: string
          format: uuid
        sender_id:
          type: string
          format: uuid
        sender_username:
          type: string
        content:
          type: string
        message_type:
          type: string
          enum: [text, image, video, audio, file, location, system]
        reply_to_message_id:
          type: string
          format: uuid
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/MessageAttachment'
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/MessageReaction'
        is_edited:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, conversation_id, sender_id, sender_username, content, message_type, attachments, reactions, is_edited, created_at, updated_at]

    MessageAttachment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        file_name:
          type: string
        file_type:
          type: string
        file_size:
          type: integer
        file_url:
          type: string
          format: uri
        thumbnail_url:
          type: string
          format: uri
        width:
          type: integer
        height:
          type: integer
        duration_seconds:
          type: number
      required: [id, file_name, file_type, file_size, file_url]

    MessageReaction:
      type: object
      properties:
        emoji:
          type: string
        user_id:
          type: string
          format: uuid
        username:
          type: string
        created_at:
          type: string
          format: date-time
      required: [emoji, user_id, username, created_at]

    SendMessageRequest:
      type: object
      properties:
        conversation_id:
          type: string
          format: uuid
        content:
          type: string
          maxLength: 4000
        message_type:
          type: string
          enum: [text, image, video, audio, file, location]
          default: text
        reply_to_message_id:
          type: string
          format: uuid
        metadata:
          type: object
      required: [conversation_id, content]

    EditMessageRequest:
      type: object
      properties:
        content:
          type: string
          maxLength: 4000
        metadata:
          type: object
      required: [content]

    # Location Schemas
    LocationUpdateRequest:
      type: object
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
        accuracy_meters:
          type: number
          format: double
          minimum: 0
        altitude_meters:
          type: number
          format: double
        speed_mps:
          type: number
          format: double
          minimum: 0
        heading_degrees:
          type: number
          format: double
          minimum: 0
          maximum: 360
        location_source:
          type: string
          enum: [gps, network, passive, manual]
          default: gps
        battery_level:
          type: integer
          minimum: 0
          maximum: 100
      required: [latitude, longitude]

    LocationUpdateResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        accuracy_meters:
          type: number
          format: double
        is_current:
          type: boolean
        created_at:
          type: string
          format: date-time
      required: [id, user_id, latitude, longitude, is_current, created_at]

    LocationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        accuracy_meters:
          type: number
          format: double
        altitude_meters:
          type: number
          format: double
        updated_at:
          type: string
          format: date-time
      required: [id, latitude, longitude, updated_at]

    NearbyUser:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        profile_picture_url:
          type: string
          format: uri
        distance_meters:
          type: number
          format: double
        approximate_latitude:
          type: number
          format: double
        approximate_longitude:
          type: number
          format: double
        last_seen_at:
          type: string
          format: date-time
        is_online:
          type: boolean
        is_friend:
          type: boolean
      required: [user_id, username, first_name, last_name, distance_meters, last_seen_at, is_online, is_friend]

    NearbyUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/NearbyUser'
        total:
          type: integer
          minimum: 0
        radius_used:
          type: integer
        center_latitude:
          type: number
          format: double
        center_longitude:
          type: number
          format: double
      required: [users, total, radius_used, center_latitude, center_longitude]

    # AI Schemas
    AIInsight:
      type: object
      properties:
        id:
          type: string
          format: uuid
        insight_type:
          type: string
          enum: [personality, behavior, suggestion, trend, compatibility]
        title:
          type: string
        description:
          type: string
        confidence_score:
          type: number
          format: double
          minimum: 0
          maximum: 1
        metadata:
          type: object
        generated_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
      required: [id, insight_type, title, description, confidence_score, generated_at]

    AIInsightsResponse:
      type: object
      properties:
        insights:
          type: array
          items:
            $ref: '#/components/schemas/AIInsight'
        total_count:
          type: integer
        generated_at:
          type: string
          format: date-time
      required: [insights, total_count, generated_at]

    ConversationStarter:
      type: object
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
        context:
          type: string
        confidence_score:
          type: number
          format: double
          minimum: 0
          maximum: 1
        target_user_id:
          type: string
          format: uuid
        generated_at:
          type: string
          format: date-time
      required: [id, text, context, confidence_score, generated_at]

    ConversationStartersResponse:
      type: object
      properties:
        starters:
          type: array
          items:
            $ref: '#/components/schemas/ConversationStarter'
        total_count:
          type: integer
        target_user_id:
          type: string
          format: uuid
        generated_at:
          type: string
          format: date-time
      required: [starters, total_count, generated_at]

    RelationshipScoreResponse:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        other_user_id:
          type: string
          format: uuid
        relationship_type:
          type: string
          enum: [friendship, romantic, professional]
        overall_score:
          type: number
          format: double
          minimum: 0
          maximum: 100
        dimension_scores:
          type: object
          properties:
            personality_match:
              type: number
              format: double
              minimum: 0
              maximum: 100
            interest_alignment:
              type: number
              format: double
              minimum: 0
              maximum: 100
            communication_style:
              type: number
              format: double
              minimum: 0
              maximum: 100
            activity_compatibility:
              type: number
              format: double
              minimum: 0
              maximum: 100
          required: [personality_match, interest_alignment, communication_style, activity_compatibility]
        explanation:
          type: string
        calculated_at:
          type: string
          format: date-time
      required: [user_id, other_user_id, relationship_type, overall_score, dimension_scores, calculated_at]

    # Timeline Schemas
    TimelineItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [story, opportunity, ai_suggestion, friend_activity]
        title:
          type: string
        description:
          type: string
        image_url:
          type: string
          format: uri
        priority_score:
          type: number
          format: double
        metadata:
          type: object
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
      required: [id, type, title, priority_score, created_at]

    TimelineResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TimelineItem'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        last_updated:
          type: string
          format: date-time
      required: [items, pagination, last_updated]

    # Error Schemas
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: integer
        details:
          type: object
        timestamp:
          type: string
          format: date-time
      required: [error, message, code, timestamp]

  responses:
    BadRequest:
      description: Bad Request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "validation_error"
            message: "The provided input data is invalid"
            code: 400
            timestamp: "2024-08-09T12:00:00Z"

    Unauthorized:
      description: Unauthorized - Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "unauthorized"
            message: "Authentication token is missing or invalid"
            code: 401
            timestamp: "2024-08-09T12:00:00Z"

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "forbidden"
            message: "You don't have permission to access this resource"
            code: 403
            timestamp: "2024-08-09T12:00:00Z"

    NotFound:
      description: Not Found - Resource doesn't exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "not_found"
            message: "The requested resource was not found"
            code: 404
            timestamp: "2024-08-09T12:00:00Z"

    Conflict:
      description: Conflict - Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "conflict"
            message: "A resource with this identifier already exists"
            code: 409
            timestamp: "2024-08-09T12:00:00Z"

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "internal_error"
            message: "An unexpected error occurred"
            code: 500
            timestamp: "2024-08-09T12:00:00Z"

security:
  - BearerAuth: []

tags:
  - name: System
    description: Health checks and system information
  - name: Authentication
    description: User authentication and registration
  - name: Users
    description: User profile management
  - name: Social
    description: Friends and social features
  - name: Chat
    description: Real-time messaging and conversations
  - name: Location
    description: Location sharing and proximity features
  - name: AI
    description: AI-powered insights and recommendations
  - name: Timeline
    description: Aggregated user timeline and activity feed

x-tagGroups:
  - name: Core Services
    tags:
      - System
      - Authentication
      - Users
  - name: Social Features
    tags:
      - Social
      - Chat
      - Location
  - name: Intelligence
    tags:
      - AI
      - Timeline
