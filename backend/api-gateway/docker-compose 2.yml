# =================================================================
# Link API Gateway - Development Docker Compose
# Extends the main project docker-compose.yml for API Gateway specific needs
# =================================================================

version: '3.8'

services:
  # API Gateway Service - Override from main compose
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: link_api_gateway_dev
    ports:
      - "8080:8080"     # Main API port
    environment:
      # Application Configuration
      - APP_ENV=${APP_ENV:-development}
      - APP_PORT=8080
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - LOG_FORMAT=${LOG_FORMAT:-text}
      
      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET:-development-jwt-secret-change-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-24h}
      - JWT_ISSUER=${JWT_ISSUER:-link-api-gateway-dev}
      
      # Service Discovery & Load Balancing (connects to existing services)
      - USER_SVC_URL=http://link_user_svc:8080
      - CHAT_SVC_URL=http://link_chat_svc:8080
      - AI_SVC_URL=http://link_ai_svc:8000
      - DISCOVERY_SVC_URL=http://link_discovery_svc:8080
      - LOCATION_SVC_URL=http://link_location_svc:8080
      - STORIES_SVC_URL=http://link_stories_svc:8080
      - OPPORTUNITIES_SVC_URL=http://link_opportunities_svc:8080
      
      # Load Balancer Configuration
      - DEFAULT_LB_STRATEGY=${DEFAULT_LB_STRATEGY:-round-robin}
      - DEFAULT_LB_MAX_FAILURES=${DEFAULT_LB_MAX_FAILURES:-5}
      - DEFAULT_LB_TIMEOUT=${DEFAULT_LB_TIMEOUT:-30}
      - DEFAULT_LB_RECOVERY_TIMEOUT=${DEFAULT_LB_RECOVERY_TIMEOUT:-60}
      
      # Retry Configuration  
      - DEFAULT_RETRY_MAX=${DEFAULT_RETRY_MAX:-3}
      - DEFAULT_RETRY_BASE_DELAY=${DEFAULT_RETRY_BASE_DELAY:-100}
      - DEFAULT_RETRY_MAX_DELAY=${DEFAULT_RETRY_MAX_DELAY:-5000}
      - DEFAULT_RETRY_JITTER=${DEFAULT_RETRY_JITTER:-true}
      
      # Database Configuration (use existing DB from main compose)
      - DB_HOST=link_postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-linkuser}
      - DB_PASSWORD=${DB_PASSWORD:-linkpass}
      - DB_NAME=linkdb
      - DB_SSL_MODE=disable
      
      # Redis Configuration (use existing Redis from main compose)
      - REDIS_HOST=link_redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      
      # Monitoring & Observability
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - METRICS_PORT=8080
      - METRICS_PATH=${METRICS_PATH:-/metrics}
      - TRACING_ENABLED=${TRACING_ENABLED:-true}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://link_jaeger:14268/api/traces}
      - JAEGER_SAMPLER_RATE=${JAEGER_SAMPLER_RATE:-1.0}
      
      # Security Configuration
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - CORS_ALLOWED_METHODS=${CORS_ALLOWED_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      - CORS_ALLOWED_HEADERS=${CORS_ALLOWED_HEADERS:-Content-Type,Authorization,X-User-ID,X-Request-ID}
      - RATE_LIMIT_RPS=${RATE_LIMIT_RPS:-100}
      - RATE_LIMIT_BURST=${RATE_LIMIT_BURST:-200}
      
      # Health Check Configuration
      - HEALTH_CHECK_ENABLED=${HEALTH_CHECK_ENABLED:-true}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30s}
      
      # Development Features
      - ENABLE_DEBUG_ENDPOINTS=${ENABLE_DEBUG_ENDPOINTS:-true}
      - ENABLE_PPROF=${ENABLE_PPROF:-true}
      - ENABLE_REQUEST_LOGGING=${ENABLE_REQUEST_LOGGING:-true}
    
    volumes:
      # Mount source code for development hot reload
      - .:/app:cached
      - /app/tmp  # Exclude tmp directory
    
    networks:
      - link_network           # Connect to main project network
      - link_monitoring        # Connect to monitoring network
    
    depends_on:
      - postgres
      - redis
      - user-svc
      - chat-svc 
      - discovery-svc
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    labels:
      - "com.link.service=api-gateway"
      - "com.link.version=2.0.0"
      - "com.link.environment=${APP_ENV:-development}"
      - "prometheus.scrape=true"
      - "prometheus.port=8080"
      - "prometheus.path=/metrics"

# Use external networks defined in main project
networks:
  link_network:
    external: true
    name: link-distributed-architecture_link_network
  
  link_monitoring:
    external: true
    name: link_monitoring
