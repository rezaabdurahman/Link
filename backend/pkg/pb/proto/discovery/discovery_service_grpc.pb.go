// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/discovery/discovery_service.proto

package discovery

import (
	context "context"
	common "github.com/link-app/backend/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DiscoveryService_GetAvailableUsers_FullMethodName              = "/discovery.DiscoveryService/GetAvailableUsers"
	DiscoveryService_UpdateAvailability_FullMethodName             = "/discovery.DiscoveryService/UpdateAvailability"
	DiscoveryService_GetUserAvailability_FullMethodName            = "/discovery.DiscoveryService/GetUserAvailability"
	DiscoveryService_SubscribeToAvailabilityUpdates_FullMethodName = "/discovery.DiscoveryService/SubscribeToAvailabilityUpdates"
	DiscoveryService_GetNearbyUsers_FullMethodName                 = "/discovery.DiscoveryService/GetNearbyUsers"
	DiscoveryService_UpdateLocation_FullMethodName                 = "/discovery.DiscoveryService/UpdateLocation"
	DiscoveryService_GetDiscoveryPreferences_FullMethodName        = "/discovery.DiscoveryService/GetDiscoveryPreferences"
	DiscoveryService_Health_FullMethodName                         = "/discovery.DiscoveryService/Health"
)

// DiscoveryServiceClient is the client API for DiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Discovery Service definition
type DiscoveryServiceClient interface {
	// Get available users for discovery
	GetAvailableUsers(ctx context.Context, in *GetAvailableUsersRequest, opts ...grpc.CallOption) (*GetAvailableUsersResponse, error)
	// Update user availability status
	UpdateAvailability(ctx context.Context, in *UpdateAvailabilityRequest, opts ...grpc.CallOption) (*UpdateAvailabilityResponse, error)
	// Get user availability status
	GetUserAvailability(ctx context.Context, in *GetUserAvailabilityRequest, opts ...grpc.CallOption) (*GetUserAvailabilityResponse, error)
	// Subscribe to availability updates (streaming)
	SubscribeToAvailabilityUpdates(ctx context.Context, in *SubscribeAvailabilityRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AvailabilityUpdate], error)
	// Get nearby users
	GetNearbyUsers(ctx context.Context, in *GetNearbyUsersRequest, opts ...grpc.CallOption) (*GetNearbyUsersResponse, error)
	// Update user location
	UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error)
	// Get discovery preferences
	GetDiscoveryPreferences(ctx context.Context, in *GetDiscoveryPreferencesRequest, opts ...grpc.CallOption) (*GetDiscoveryPreferencesResponse, error)
	// Health check
	Health(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error)
}

type discoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryServiceClient(cc grpc.ClientConnInterface) DiscoveryServiceClient {
	return &discoveryServiceClient{cc}
}

func (c *discoveryServiceClient) GetAvailableUsers(ctx context.Context, in *GetAvailableUsersRequest, opts ...grpc.CallOption) (*GetAvailableUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableUsersResponse)
	err := c.cc.Invoke(ctx, DiscoveryService_GetAvailableUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) UpdateAvailability(ctx context.Context, in *UpdateAvailabilityRequest, opts ...grpc.CallOption) (*UpdateAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAvailabilityResponse)
	err := c.cc.Invoke(ctx, DiscoveryService_UpdateAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) GetUserAvailability(ctx context.Context, in *GetUserAvailabilityRequest, opts ...grpc.CallOption) (*GetUserAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAvailabilityResponse)
	err := c.cc.Invoke(ctx, DiscoveryService_GetUserAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) SubscribeToAvailabilityUpdates(ctx context.Context, in *SubscribeAvailabilityRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AvailabilityUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DiscoveryService_ServiceDesc.Streams[0], DiscoveryService_SubscribeToAvailabilityUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeAvailabilityRequest, AvailabilityUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DiscoveryService_SubscribeToAvailabilityUpdatesClient = grpc.ServerStreamingClient[AvailabilityUpdate]

func (c *discoveryServiceClient) GetNearbyUsers(ctx context.Context, in *GetNearbyUsersRequest, opts ...grpc.CallOption) (*GetNearbyUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNearbyUsersResponse)
	err := c.cc.Invoke(ctx, DiscoveryService_GetNearbyUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLocationResponse)
	err := c.cc.Invoke(ctx, DiscoveryService_UpdateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) GetDiscoveryPreferences(ctx context.Context, in *GetDiscoveryPreferencesRequest, opts ...grpc.CallOption) (*GetDiscoveryPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiscoveryPreferencesResponse)
	err := c.cc.Invoke(ctx, DiscoveryService_GetDiscoveryPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) Health(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.HealthCheckResponse)
	err := c.cc.Invoke(ctx, DiscoveryService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServiceServer is the server API for DiscoveryService service.
// All implementations must embed UnimplementedDiscoveryServiceServer
// for forward compatibility.
//
// Discovery Service definition
type DiscoveryServiceServer interface {
	// Get available users for discovery
	GetAvailableUsers(context.Context, *GetAvailableUsersRequest) (*GetAvailableUsersResponse, error)
	// Update user availability status
	UpdateAvailability(context.Context, *UpdateAvailabilityRequest) (*UpdateAvailabilityResponse, error)
	// Get user availability status
	GetUserAvailability(context.Context, *GetUserAvailabilityRequest) (*GetUserAvailabilityResponse, error)
	// Subscribe to availability updates (streaming)
	SubscribeToAvailabilityUpdates(*SubscribeAvailabilityRequest, grpc.ServerStreamingServer[AvailabilityUpdate]) error
	// Get nearby users
	GetNearbyUsers(context.Context, *GetNearbyUsersRequest) (*GetNearbyUsersResponse, error)
	// Update user location
	UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error)
	// Get discovery preferences
	GetDiscoveryPreferences(context.Context, *GetDiscoveryPreferencesRequest) (*GetDiscoveryPreferencesResponse, error)
	// Health check
	Health(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error)
	mustEmbedUnimplementedDiscoveryServiceServer()
}

// UnimplementedDiscoveryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiscoveryServiceServer struct{}

func (UnimplementedDiscoveryServiceServer) GetAvailableUsers(context.Context, *GetAvailableUsersRequest) (*GetAvailableUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableUsers not implemented")
}
func (UnimplementedDiscoveryServiceServer) UpdateAvailability(context.Context, *UpdateAvailabilityRequest) (*UpdateAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvailability not implemented")
}
func (UnimplementedDiscoveryServiceServer) GetUserAvailability(context.Context, *GetUserAvailabilityRequest) (*GetUserAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAvailability not implemented")
}
func (UnimplementedDiscoveryServiceServer) SubscribeToAvailabilityUpdates(*SubscribeAvailabilityRequest, grpc.ServerStreamingServer[AvailabilityUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToAvailabilityUpdates not implemented")
}
func (UnimplementedDiscoveryServiceServer) GetNearbyUsers(context.Context, *GetNearbyUsersRequest) (*GetNearbyUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearbyUsers not implemented")
}
func (UnimplementedDiscoveryServiceServer) UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedDiscoveryServiceServer) GetDiscoveryPreferences(context.Context, *GetDiscoveryPreferencesRequest) (*GetDiscoveryPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveryPreferences not implemented")
}
func (UnimplementedDiscoveryServiceServer) Health(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedDiscoveryServiceServer) mustEmbedUnimplementedDiscoveryServiceServer() {}
func (UnimplementedDiscoveryServiceServer) testEmbeddedByValue()                          {}

// UnsafeDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryServiceServer will
// result in compilation errors.
type UnsafeDiscoveryServiceServer interface {
	mustEmbedUnimplementedDiscoveryServiceServer()
}

func RegisterDiscoveryServiceServer(s grpc.ServiceRegistrar, srv DiscoveryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDiscoveryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiscoveryService_ServiceDesc, srv)
}

func _DiscoveryService_GetAvailableUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).GetAvailableUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoveryService_GetAvailableUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).GetAvailableUsers(ctx, req.(*GetAvailableUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_UpdateAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).UpdateAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoveryService_UpdateAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).UpdateAvailability(ctx, req.(*UpdateAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_GetUserAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).GetUserAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoveryService_GetUserAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).GetUserAvailability(ctx, req.(*GetUserAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_SubscribeToAvailabilityUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAvailabilityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiscoveryServiceServer).SubscribeToAvailabilityUpdates(m, &grpc.GenericServerStream[SubscribeAvailabilityRequest, AvailabilityUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DiscoveryService_SubscribeToAvailabilityUpdatesServer = grpc.ServerStreamingServer[AvailabilityUpdate]

func _DiscoveryService_GetNearbyUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearbyUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).GetNearbyUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoveryService_GetNearbyUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).GetNearbyUsers(ctx, req.(*GetNearbyUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoveryService_UpdateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).UpdateLocation(ctx, req.(*UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_GetDiscoveryPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoveryPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).GetDiscoveryPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoveryService_GetDiscoveryPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).GetDiscoveryPreferences(ctx, req.(*GetDiscoveryPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoveryService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).Health(ctx, req.(*common.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscoveryService_ServiceDesc is the grpc.ServiceDesc for DiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.DiscoveryService",
	HandlerType: (*DiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableUsers",
			Handler:    _DiscoveryService_GetAvailableUsers_Handler,
		},
		{
			MethodName: "UpdateAvailability",
			Handler:    _DiscoveryService_UpdateAvailability_Handler,
		},
		{
			MethodName: "GetUserAvailability",
			Handler:    _DiscoveryService_GetUserAvailability_Handler,
		},
		{
			MethodName: "GetNearbyUsers",
			Handler:    _DiscoveryService_GetNearbyUsers_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _DiscoveryService_UpdateLocation_Handler,
		},
		{
			MethodName: "GetDiscoveryPreferences",
			Handler:    _DiscoveryService_GetDiscoveryPreferences_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _DiscoveryService_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToAvailabilityUpdates",
			Handler:       _DiscoveryService_SubscribeToAvailabilityUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/discovery/discovery_service.proto",
}
