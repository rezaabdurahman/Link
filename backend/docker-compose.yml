version: '3.8'

# Load environment variables from multiple files
# Priority: .env.local (highest) -> .env (lowest)
# .env.local contains generated secrets and should not be committed
x-env-files: &env-files
  - .env
  - .env.local

services:
  # PostgreSQL with CloudNativePG-compatible settings for local development
  postgres:
    image: postgres:16-alpine
    container_name: link_postgres_primary
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-linkuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-linkpass}
      POSTGRES_DB: ${DB_NAME:-linkdb}
      # Database initialization with CloudNativePG-compatible settings
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C --data-checksums --auth-host=scram-sha-256 --auth-local=scram-sha-256"
      # Service-specific database passwords
      USER_SERVICE_PASSWORD: ${USER_SERVICE_PASSWORD:-user_svc_pass}
      CHAT_SERVICE_PASSWORD: ${CHAT_SERVICE_PASSWORD:-chat_svc_pass}
      SUMMARYGEN_SERVICE_PASSWORD: ${SUMMARYGEN_SERVICE_PASSWORD:-summarygen_svc_pass}
      AI_SERVICE_PASSWORD: ${AI_SERVICE_PASSWORD:-ai_svc_pass}  # Legacy compatibility
      DISCOVERY_SERVICE_PASSWORD: ${DISCOVERY_SERVICE_PASSWORD:-discovery_svc_pass}
      SEARCH_SERVICE_PASSWORD: ${SEARCH_SERVICE_PASSWORD:-search_svc_pass}
      FEATURE_SERVICE_PASSWORD: ${FEATURE_SERVICE_PASSWORD:-feature_svc_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db-cnpg-compat.sh:/docker-entrypoint-initdb.d/01-init-db-cnpg.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-linkuser} -d ${DB_NAME:-linkdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    command: [
      "postgres",
      "-c", "log_statement=ddl",
      "-c", "log_min_duration_statement=1000",
      "-c", "shared_preload_libraries=pg_stat_statements",
      "-c", "password_encryption=scram-sha-256",
      "-c", "max_connections=100",
      "-c", "shared_buffers=128MB",
      "-c", "effective_cache_size=512MB"
    ]

  # Consolidated Redis (all services share with logical database separation)
  redis:
    image: redis:6.2
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru --databases 16
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # LocalStack for local AWS services (KMS for PII encryption)
  localstack:
    image: localstack/localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=kms
      - DEBUG=1
      - DEFAULT_REGION=us-west-2
    volumes:
      - localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - user-svc
      - chat-svc
      - discovery-svc
      - summarygen-svc
      - search-svc
      - feature-svc
      - redis
    environment:
      # K8s-native configuration (for local Docker, we simulate K8s service names)
      K8S_NAMESPACE: "default"
      K8S_CLUSTER_DOMAIN: "docker.internal"
      
      # Local Docker service discovery (override K8s defaults)
      USER_SVC_URL: http://user-svc:8081
      CHAT_SVC_URL: http://chat-svc:8082
      DISCOVERY_SVC_URL: http://discovery-svc:8083
      SUMMARYGEN_SVC_URL: http://summarygen-svc:8084
      AI_SVC_URL: http://summarygen-svc:8084  # Legacy compatibility
      SEARCH_SVC_URL: http://search-svc:8085
      FEATURE_SVC_URL: http://feature-svc:8086
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
      JWT_ISSUER: "link-app"
      JWT_AUDIENCE: "link-api"
      JWT_EXPIRY_HOURS: 24
      
      # Database and Gateway Redis
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-linkuser}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-linkpass}
      DB_NAME: ${DB_NAME:-linkdb}
      DB_SSL_MODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0  # API Gateway database
      
      # Environment
      ENVIRONMENT: "development"
      PORT: "8080"

  user-svc:
    build:
      context: .
      dockerfile: user-svc/Dockerfile
    ports:
      - "8081:8081"   # HTTP
      - "50051:50051" # gRPC
      - "9090:9090"   # Metrics
    depends_on:
      - postgres
      - redis
      - localstack
    env_file:
      - .env  # Shared infrastructure
      - user-svc/.env.local  # Service-specific local config
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: user_service_user
      DB_PASSWORD: ${USER_SERVICE_PASSWORD:-user_svc_pass}
      DB_NAME: user_service_db
      DB_SSL_MODE: disable
      PORT: 8081
      GRPC_PORT: 50051
      METRICS_PORT: 9090
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 2  # User service database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  chat-svc:
    build:
      context: .
      dockerfile: chat-svc/Dockerfile
    ports:
      - "8082:8082"   # HTTP
      - "50053:50053" # gRPC
      - "9092:9092"   # Metrics
    depends_on:
      - postgres
      - redis
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: chat_service_user
      DB_PASSWORD: ${CHAT_SERVICE_PASSWORD:-chat_svc_pass}
      DB_NAME: chat_service_db
      PORT: 8082
      GRPC_PORT: 50053
      METRICS_PORT: 9092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 3  # Chat service database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  discovery-svc:
    build:
      context: .
      dockerfile: discovery-svc/Dockerfile
    ports:
      - "8083:8083"   # HTTP
      - "50052:50052" # gRPC
      - "9091:9091"   # Metrics
    depends_on:
      - postgres
      - redis
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: discovery_service_user
      DB_PASSWORD: ${DISCOVERY_SERVICE_PASSWORD:-discovery_svc_pass}
      DB_NAME: discovery_service_db
      DB_SSL_MODE: disable
      PORT: 8083
      GRPC_PORT: 50052
      METRICS_PORT: 9091
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 4  # Discovery service database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  summarygen-svc:
    build:
      context: .
      dockerfile: summarygen-svc/Dockerfile
    ports:
      - "8084:8084"   # HTTP
      - "50054:50054" # gRPC
      - "9093:9093"   # Metrics
    environment:
      PORT: 8084
      GRPC_PORT: 50054
      METRICS_PORT: 9093
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  search-svc:
    build:
      context: .
      dockerfile: search-svc/Dockerfile
    ports:
      - "8085:8085"   # HTTP
      - "50055:50055" # gRPC
      - "9094:9094"   # Metrics
    depends_on:
      - postgres
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: search_service_user
      DB_PASSWORD: ${SEARCH_SERVICE_PASSWORD:-search_svc_pass}
      DB_NAME: search_service_db
      DB_SSL_MODE: disable
      PORT: 8085
      GRPC_PORT: 50055
      METRICS_PORT: 9094
      # gRPC endpoints for service-to-service communication
      USE_GRPC: "true"
      DISCOVERY_GRPC_ENDPOINT: discovery-svc:50052
      USER_GRPC_ENDPOINT: user-svc:50051
      # HTTP fallback endpoints
      DISCOVERY_SVC_URL: http://discovery-svc:8083
      USER_SVC_URL: http://user-svc:8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  feature-svc:
    build:
      context: .
      dockerfile: feature-svc/Dockerfile
    ports:
      - "8086:8086"   # HTTP
      - "9096:9096"   # Metrics
    depends_on:
      - postgres
      - redis
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: feature_service_user
      DB_PASSWORD: ${FEATURE_SERVICE_PASSWORD:-feature_svc_pass}
      DB_NAME: feature_service_db
      DB_SSL_MODE: disable
      PORT: 8086
      METRICS_PORT: 9096
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 1  # Use different Redis DB for features
      ENVIRONMENT: "development"
      GIN_MODE: "debug"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8086/health"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  localstack_data:

