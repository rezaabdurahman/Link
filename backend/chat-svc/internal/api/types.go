// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ConversationType.
const (
	Direct ConversationType = "direct"
	Group  ConversationType = "group"
)

// Defines values for MessageType.
const (
	Audio  MessageType = "audio"
	File   MessageType = "file"
	Image  MessageType = "image"
	System MessageType = "system"
	Text   MessageType = "text"
	Video  MessageType = "video"
)

// Defines values for ParticipantRole.
const (
	Admin     ParticipantRole = "admin"
	Member    ParticipantRole = "member"
	Moderator ParticipantRole = "moderator"
	Owner     ParticipantRole = "owner"
)

// Conversation defines model for Conversation.
type Conversation struct {
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy ID of the user who created the conversation
	CreatedBy openapi_types.UUID `json:"created_by"`

	// Description Conversation description
	Description *string `json:"description"`

	// Id Unique identifier for the conversation
	Id openapi_types.UUID `json:"id"`

	// IsPrivate Whether the conversation is private
	IsPrivate   bool     `json:"is_private"`
	LastMessage *Message `json:"last_message,omitempty"`

	// MaxMembers Maximum number of members allowed
	MaxMembers *int `json:"max_members"`

	// Name Conversation name (for group chats)
	Name *string `json:"name"`

	// Participants List of conversation participants
	Participants []Participant `json:"participants"`

	// Type Type of conversation
	Type ConversationType `json:"type"`

	// UnreadCount Number of unread messages for the current user
	UnreadCount int       `json:"unread_count"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// ConversationType Type of conversation
type ConversationType string

// ConversationsResponse defines model for ConversationsResponse.
type ConversationsResponse struct {
	Data []Conversation `json:"data"`

	// HasMore Whether there are more conversations available
	HasMore bool `json:"has_more"`

	// Limit Number of conversations per page
	Limit int `json:"limit"`

	// Offset Number of conversations skipped
	Offset int `json:"offset"`

	// Total Total number of conversations
	Total int `json:"total"`
}

// CreateConversationRequest defines model for CreateConversationRequest.
type CreateConversationRequest struct {
	// Description Conversation description
	Description *string `json:"description"`

	// IsPrivate Whether the conversation is private
	IsPrivate *bool `json:"is_private,omitempty"`

	// MaxMembers Maximum number of members (for group conversations)
	MaxMembers *int `json:"max_members"`

	// Name Conversation name (required for group conversations)
	Name *string `json:"name"`

	// ParticipantIds List of user IDs to add as participants
	ParticipantIds *[]openapi_types.UUID `json:"participant_ids,omitempty"`

	// Type Type of conversation
	Type ConversationType `json:"type"`
}

// Error defines model for Error.
type Error struct {
	// Code HTTP status code
	Code int `json:"code"`

	// Details Additional error details
	Details *map[string]string `json:"details"`

	// Error Error message
	Error string `json:"error"`
}

// Message defines model for Message.
type Message struct {
	// Content Message content
	Content string `json:"content"`

	// ConversationId ID of the conversation this message belongs to
	ConversationId openapi_types.UUID `json:"conversation_id"`
	CreatedAt      time.Time          `json:"created_at"`

	// EditedAt When the message was last edited
	EditedAt *time.Time `json:"edited_at"`

	// Id Unique identifier for the message
	Id openapi_types.UUID `json:"id"`

	// MessageType Type of message
	MessageType MessageType `json:"message_type"`

	// ParentId ID of the parent message (for replies)
	ParentId  *openapi_types.UUID `json:"parent_id"`
	UpdatedAt time.Time           `json:"updated_at"`

	// UserId ID of the user who sent the message
	UserId openapi_types.UUID `json:"user_id"`
}

// MessageType Type of message
type MessageType string

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse struct {
	Data []Message `json:"data"`

	// HasMore Whether there are more messages available
	HasMore bool `json:"has_more"`

	// Limit Number of messages per page
	Limit int `json:"limit"`

	// Offset Number of messages skipped
	Offset int `json:"offset"`

	// Total Total number of messages
	Total int `json:"total"`
}

// Participant defines model for Participant.
type Participant struct {
	// Id Unique identifier for the participant
	Id       openapi_types.UUID `json:"id"`
	JoinedAt time.Time          `json:"joined_at"`
	LeftAt   *time.Time         `json:"left_at"`

	// Role Participant role in the conversation
	Role ParticipantRole `json:"role"`

	// UserId User ID
	UserId openapi_types.UUID `json:"user_id"`
}

// ParticipantRole Participant role in the conversation
type ParticipantRole string

// SendMessageRequest defines model for SendMessageRequest.
type SendMessageRequest struct {
	// Content Message content
	Content string `json:"content"`

	// ConversationId ID of the conversation to send message to
	ConversationId openapi_types.UUID `json:"conversation_id"`

	// MessageType Type of message
	MessageType *MessageType `json:"message_type,omitempty"`

	// ParentId ID of the parent message (for replies)
	ParentId *openapi_types.UUID `json:"parent_id"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// GetConversationsParams defines parameters for GetConversations.
type GetConversationsParams struct {
	// Limit Number of conversations per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of conversations to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetConversationMessagesParams defines parameters for GetConversationMessages.
type GetConversationMessagesParams struct {
	// Limit Number of messages per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of messages to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Before Get messages before this timestamp
	Before *time.Time `form:"before,omitempty" json:"before,omitempty"`
}

// CreateConversationJSONRequestBody defines body for CreateConversation for application/json ContentType.
type CreateConversationJSONRequestBody = CreateConversationRequest

// SendMessageJSONRequestBody defines body for SendMessage for application/json ContentType.
type SendMessageJSONRequestBody = SendMessageRequest
