// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/ai/ai_service.proto

package ai

import (
	context "context"
	common "github.com/link-app/backend/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIService_SummarizeConversation_FullMethodName       = "/ai.AIService/SummarizeConversation"
	AIService_GenerateResponseSuggestions_FullMethodName = "/ai.AIService/GenerateResponseSuggestions"
	AIService_AnalyzeSentiment_FullMethodName            = "/ai.AIService/AnalyzeSentiment"
	AIService_StreamSummarization_FullMethodName         = "/ai.AIService/StreamSummarization"
	AIService_CheckUserConsent_FullMethodName            = "/ai.AIService/CheckUserConsent"
	AIService_UpdateUserConsent_FullMethodName           = "/ai.AIService/UpdateUserConsent"
	AIService_GenerateInsights_FullMethodName            = "/ai.AIService/GenerateInsights"
	AIService_Health_FullMethodName                      = "/ai.AIService/Health"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AI Service definition
type AIServiceClient interface {
	// Summarize conversation messages
	SummarizeConversation(ctx context.Context, in *SummarizeConversationRequest, opts ...grpc.CallOption) (*SummarizeConversationResponse, error)
	// Generate response suggestions
	GenerateResponseSuggestions(ctx context.Context, in *GenerateResponseSuggestionsRequest, opts ...grpc.CallOption) (*GenerateResponseSuggestionsResponse, error)
	// Analyze message sentiment
	AnalyzeSentiment(ctx context.Context, in *AnalyzeSentimentRequest, opts ...grpc.CallOption) (*AnalyzeSentimentResponse, error)
	// Stream conversation summarization (for large conversations)
	StreamSummarization(ctx context.Context, in *StreamSummarizationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SummarizationChunk], error)
	// Check user consent for AI processing
	CheckUserConsent(ctx context.Context, in *CheckUserConsentRequest, opts ...grpc.CallOption) (*CheckUserConsentResponse, error)
	// Update user consent preferences
	UpdateUserConsent(ctx context.Context, in *UpdateUserConsentRequest, opts ...grpc.CallOption) (*UpdateUserConsentResponse, error)
	// Generate conversation insights
	GenerateInsights(ctx context.Context, in *GenerateInsightsRequest, opts ...grpc.CallOption) (*GenerateInsightsResponse, error)
	// Health check
	Health(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) SummarizeConversation(ctx context.Context, in *SummarizeConversationRequest, opts ...grpc.CallOption) (*SummarizeConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizeConversationResponse)
	err := c.cc.Invoke(ctx, AIService_SummarizeConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GenerateResponseSuggestions(ctx context.Context, in *GenerateResponseSuggestionsRequest, opts ...grpc.CallOption) (*GenerateResponseSuggestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateResponseSuggestionsResponse)
	err := c.cc.Invoke(ctx, AIService_GenerateResponseSuggestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) AnalyzeSentiment(ctx context.Context, in *AnalyzeSentimentRequest, opts ...grpc.CallOption) (*AnalyzeSentimentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeSentimentResponse)
	err := c.cc.Invoke(ctx, AIService_AnalyzeSentiment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) StreamSummarization(ctx context.Context, in *StreamSummarizationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SummarizationChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIService_ServiceDesc.Streams[0], AIService_StreamSummarization_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamSummarizationRequest, SummarizationChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_StreamSummarizationClient = grpc.ServerStreamingClient[SummarizationChunk]

func (c *aIServiceClient) CheckUserConsent(ctx context.Context, in *CheckUserConsentRequest, opts ...grpc.CallOption) (*CheckUserConsentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserConsentResponse)
	err := c.cc.Invoke(ctx, AIService_CheckUserConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) UpdateUserConsent(ctx context.Context, in *UpdateUserConsentRequest, opts ...grpc.CallOption) (*UpdateUserConsentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserConsentResponse)
	err := c.cc.Invoke(ctx, AIService_UpdateUserConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GenerateInsights(ctx context.Context, in *GenerateInsightsRequest, opts ...grpc.CallOption) (*GenerateInsightsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateInsightsResponse)
	err := c.cc.Invoke(ctx, AIService_GenerateInsights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) Health(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.HealthCheckResponse)
	err := c.cc.Invoke(ctx, AIService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility.
//
// AI Service definition
type AIServiceServer interface {
	// Summarize conversation messages
	SummarizeConversation(context.Context, *SummarizeConversationRequest) (*SummarizeConversationResponse, error)
	// Generate response suggestions
	GenerateResponseSuggestions(context.Context, *GenerateResponseSuggestionsRequest) (*GenerateResponseSuggestionsResponse, error)
	// Analyze message sentiment
	AnalyzeSentiment(context.Context, *AnalyzeSentimentRequest) (*AnalyzeSentimentResponse, error)
	// Stream conversation summarization (for large conversations)
	StreamSummarization(*StreamSummarizationRequest, grpc.ServerStreamingServer[SummarizationChunk]) error
	// Check user consent for AI processing
	CheckUserConsent(context.Context, *CheckUserConsentRequest) (*CheckUserConsentResponse, error)
	// Update user consent preferences
	UpdateUserConsent(context.Context, *UpdateUserConsentRequest) (*UpdateUserConsentResponse, error)
	// Generate conversation insights
	GenerateInsights(context.Context, *GenerateInsightsRequest) (*GenerateInsightsResponse, error)
	// Health check
	Health(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error)
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIServiceServer struct{}

func (UnimplementedAIServiceServer) SummarizeConversation(context.Context, *SummarizeConversationRequest) (*SummarizeConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SummarizeConversation not implemented")
}
func (UnimplementedAIServiceServer) GenerateResponseSuggestions(context.Context, *GenerateResponseSuggestionsRequest) (*GenerateResponseSuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateResponseSuggestions not implemented")
}
func (UnimplementedAIServiceServer) AnalyzeSentiment(context.Context, *AnalyzeSentimentRequest) (*AnalyzeSentimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeSentiment not implemented")
}
func (UnimplementedAIServiceServer) StreamSummarization(*StreamSummarizationRequest, grpc.ServerStreamingServer[SummarizationChunk]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSummarization not implemented")
}
func (UnimplementedAIServiceServer) CheckUserConsent(context.Context, *CheckUserConsentRequest) (*CheckUserConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserConsent not implemented")
}
func (UnimplementedAIServiceServer) UpdateUserConsent(context.Context, *UpdateUserConsentRequest) (*UpdateUserConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserConsent not implemented")
}
func (UnimplementedAIServiceServer) GenerateInsights(context.Context, *GenerateInsightsRequest) (*GenerateInsightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInsights not implemented")
}
func (UnimplementedAIServiceServer) Health(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}
func (UnimplementedAIServiceServer) testEmbeddedByValue()                   {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_SummarizeConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummarizeConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).SummarizeConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_SummarizeConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).SummarizeConversation(ctx, req.(*SummarizeConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GenerateResponseSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateResponseSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GenerateResponseSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GenerateResponseSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GenerateResponseSuggestions(ctx, req.(*GenerateResponseSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_AnalyzeSentiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeSentimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).AnalyzeSentiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_AnalyzeSentiment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).AnalyzeSentiment(ctx, req.(*AnalyzeSentimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_StreamSummarization_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSummarizationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIServiceServer).StreamSummarization(m, &grpc.GenericServerStream[StreamSummarizationRequest, SummarizationChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_StreamSummarizationServer = grpc.ServerStreamingServer[SummarizationChunk]

func _AIService_CheckUserConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).CheckUserConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_CheckUserConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).CheckUserConsent(ctx, req.(*CheckUserConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_UpdateUserConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).UpdateUserConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_UpdateUserConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).UpdateUserConsent(ctx, req.(*UpdateUserConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GenerateInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInsightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GenerateInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GenerateInsights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GenerateInsights(ctx, req.(*GenerateInsightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).Health(ctx, req.(*common.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SummarizeConversation",
			Handler:    _AIService_SummarizeConversation_Handler,
		},
		{
			MethodName: "GenerateResponseSuggestions",
			Handler:    _AIService_GenerateResponseSuggestions_Handler,
		},
		{
			MethodName: "AnalyzeSentiment",
			Handler:    _AIService_AnalyzeSentiment_Handler,
		},
		{
			MethodName: "CheckUserConsent",
			Handler:    _AIService_CheckUserConsent_Handler,
		},
		{
			MethodName: "UpdateUserConsent",
			Handler:    _AIService_UpdateUserConsent_Handler,
		},
		{
			MethodName: "GenerateInsights",
			Handler:    _AIService_GenerateInsights_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _AIService_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSummarization",
			Handler:       _AIService_StreamSummarization_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ai/ai_service.proto",
}
