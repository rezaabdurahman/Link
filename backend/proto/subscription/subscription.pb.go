// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: subscription.proto

package subscription

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetUserLimitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserLimitsRequest) Reset() {
	*x = GetUserLimitsRequest{}
	mi := &file_subscription_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserLimitsRequest) ProtoMessage() {}

func (x *GetUserLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetUserLimitsRequest) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserLimitsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserLimitsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limits        *SubscriptionLimits    `protobuf:"bytes,1,opt,name=limits,proto3" json:"limits,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserLimitsResponse) Reset() {
	*x = GetUserLimitsResponse{}
	mi := &file_subscription_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserLimitsResponse) ProtoMessage() {}

func (x *GetUserLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetUserLimitsResponse) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserLimitsResponse) GetLimits() *SubscriptionLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *GetUserLimitsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetUserLimitsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CheckFeatureAccessRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Feature       string                 `protobuf:"bytes,2,opt,name=feature,proto3" json:"feature,omitempty"` // e.g., "discovery", "radius_3km", "priority_support"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckFeatureAccessRequest) Reset() {
	*x = CheckFeatureAccessRequest{}
	mi := &file_subscription_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckFeatureAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFeatureAccessRequest) ProtoMessage() {}

func (x *CheckFeatureAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFeatureAccessRequest.ProtoReflect.Descriptor instead.
func (*CheckFeatureAccessRequest) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{2}
}

func (x *CheckFeatureAccessRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckFeatureAccessRequest) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

type CheckFeatureAccessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HasAccess     bool                   `protobuf:"varint,1,opt,name=has_access,json=hasAccess,proto3" json:"has_access,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"` // e.g., "limit_exceeded", "upgrade_required"
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckFeatureAccessResponse) Reset() {
	*x = CheckFeatureAccessResponse{}
	mi := &file_subscription_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckFeatureAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFeatureAccessResponse) ProtoMessage() {}

func (x *CheckFeatureAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFeatureAccessResponse.ProtoReflect.Descriptor instead.
func (*CheckFeatureAccessResponse) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{3}
}

func (x *CheckFeatureAccessResponse) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *CheckFeatureAccessResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CheckFeatureAccessResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CheckFeatureAccessResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RecordUsageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MetricType    string                 `protobuf:"bytes,2,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"` // e.g., "discovery_count"
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                            // default 1
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordUsageRequest) Reset() {
	*x = RecordUsageRequest{}
	mi := &file_subscription_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordUsageRequest) ProtoMessage() {}

func (x *RecordUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordUsageRequest.ProtoReflect.Descriptor instead.
func (*RecordUsageRequest) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{4}
}

func (x *RecordUsageRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RecordUsageRequest) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

func (x *RecordUsageRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RecordUsageResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Success        bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error          string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	RemainingCount int32                  `protobuf:"varint,3,opt,name=remaining_count,json=remainingCount,proto3" json:"remaining_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RecordUsageResponse) Reset() {
	*x = RecordUsageResponse{}
	mi := &file_subscription_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordUsageResponse) ProtoMessage() {}

func (x *RecordUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordUsageResponse.ProtoReflect.Descriptor instead.
func (*RecordUsageResponse) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{5}
}

func (x *RecordUsageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RecordUsageResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RecordUsageResponse) GetRemainingCount() int32 {
	if x != nil {
		return x.RemainingCount
	}
	return 0
}

type GetSubscriptionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubscriptionStatusRequest) Reset() {
	*x = GetSubscriptionStatusRequest{}
	mi := &file_subscription_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubscriptionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionStatusRequest) ProtoMessage() {}

func (x *GetSubscriptionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionStatusRequest) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{6}
}

func (x *GetSubscriptionStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetSubscriptionStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *UserSubscription      `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	Usage         *UsageMetrics          `protobuf:"bytes,2,opt,name=usage,proto3" json:"usage,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubscriptionStatusResponse) Reset() {
	*x = GetSubscriptionStatusResponse{}
	mi := &file_subscription_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubscriptionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionStatusResponse) ProtoMessage() {}

func (x *GetSubscriptionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionStatusResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionStatusResponse) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{7}
}

func (x *GetSubscriptionStatusResponse) GetSubscription() *UserSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *GetSubscriptionStatusResponse) GetUsage() *UsageMetrics {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *GetSubscriptionStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetSubscriptionStatusResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SubscriptionLimits struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	UserId               string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Tier                 string                 `protobuf:"bytes,2,opt,name=tier,proto3" json:"tier,omitempty"` // "basic" or "pro"
	MaxDiscoveryPerMonth int32                  `protobuf:"varint,3,opt,name=max_discovery_per_month,json=maxDiscoveryPerMonth,proto3" json:"max_discovery_per_month,omitempty"`
	MaxRadiusKm          float64                `protobuf:"fixed64,4,opt,name=max_radius_km,json=maxRadiusKm,proto3" json:"max_radius_km,omitempty"`
	RemainingDiscoveries int32                  `protobuf:"varint,5,opt,name=remaining_discoveries,json=remainingDiscoveries,proto3" json:"remaining_discoveries,omitempty"`
	CurrentPeriodStart   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=current_period_start,json=currentPeriodStart,proto3" json:"current_period_start,omitempty"`
	CurrentPeriodEnd     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=current_period_end,json=currentPeriodEnd,proto3" json:"current_period_end,omitempty"`
	IsActive             bool                   `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SubscriptionLimits) Reset() {
	*x = SubscriptionLimits{}
	mi := &file_subscription_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionLimits) ProtoMessage() {}

func (x *SubscriptionLimits) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionLimits.ProtoReflect.Descriptor instead.
func (*SubscriptionLimits) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{8}
}

func (x *SubscriptionLimits) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubscriptionLimits) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *SubscriptionLimits) GetMaxDiscoveryPerMonth() int32 {
	if x != nil {
		return x.MaxDiscoveryPerMonth
	}
	return 0
}

func (x *SubscriptionLimits) GetMaxRadiusKm() float64 {
	if x != nil {
		return x.MaxRadiusKm
	}
	return 0
}

func (x *SubscriptionLimits) GetRemainingDiscoveries() int32 {
	if x != nil {
		return x.RemainingDiscoveries
	}
	return 0
}

func (x *SubscriptionLimits) GetCurrentPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPeriodStart
	}
	return nil
}

func (x *SubscriptionLimits) GetCurrentPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPeriodEnd
	}
	return nil
}

func (x *SubscriptionLimits) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type UserSubscription struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId             string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Plan               *SubscriptionPlan      `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
	Status             string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"` // "active", "canceled", "past_due", etc.
	CurrentPeriodStart *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=current_period_start,json=currentPeriodStart,proto3" json:"current_period_start,omitempty"`
	CurrentPeriodEnd   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=current_period_end,json=currentPeriodEnd,proto3" json:"current_period_end,omitempty"`
	CanceledAt         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=canceled_at,json=canceledAt,proto3" json:"canceled_at,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserSubscription) Reset() {
	*x = UserSubscription{}
	mi := &file_subscription_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSubscription) ProtoMessage() {}

func (x *UserSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSubscription.ProtoReflect.Descriptor instead.
func (*UserSubscription) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{9}
}

func (x *UserSubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserSubscription) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSubscription) GetPlan() *SubscriptionPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *UserSubscription) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserSubscription) GetCurrentPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPeriodStart
	}
	return nil
}

func (x *UserSubscription) GetCurrentPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPeriodEnd
	}
	return nil
}

func (x *UserSubscription) GetCanceledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CanceledAt
	}
	return nil
}

func (x *UserSubscription) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type SubscriptionPlan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tier          string                 `protobuf:"bytes,3,opt,name=tier,proto3" json:"tier,omitempty"`
	PriceCents    int32                  `protobuf:"varint,4,opt,name=price_cents,json=priceCents,proto3" json:"price_cents,omitempty"`
	Currency      string                 `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Features      *PlanFeatures          `protobuf:"bytes,6,opt,name=features,proto3" json:"features,omitempty"`
	IsActive      bool                   `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionPlan) Reset() {
	*x = SubscriptionPlan{}
	mi := &file_subscription_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionPlan) ProtoMessage() {}

func (x *SubscriptionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionPlan.ProtoReflect.Descriptor instead.
func (*SubscriptionPlan) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{10}
}

func (x *SubscriptionPlan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscriptionPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubscriptionPlan) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *SubscriptionPlan) GetPriceCents() int32 {
	if x != nil {
		return x.PriceCents
	}
	return 0
}

func (x *SubscriptionPlan) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SubscriptionPlan) GetFeatures() *PlanFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *SubscriptionPlan) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type PlanFeatures struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxDiscoveryPerMonth int32                  `protobuf:"varint,1,opt,name=max_discovery_per_month,json=maxDiscoveryPerMonth,proto3" json:"max_discovery_per_month,omitempty"`
	MaxRadiusKm          float64                `protobuf:"fixed64,2,opt,name=max_radius_km,json=maxRadiusKm,proto3" json:"max_radius_km,omitempty"`
	UnlimitedChats       bool                   `protobuf:"varint,3,opt,name=unlimited_chats,json=unlimitedChats,proto3" json:"unlimited_chats,omitempty"`
	PrioritySupport      bool                   `protobuf:"varint,4,opt,name=priority_support,json=prioritySupport,proto3" json:"priority_support,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PlanFeatures) Reset() {
	*x = PlanFeatures{}
	mi := &file_subscription_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanFeatures) ProtoMessage() {}

func (x *PlanFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanFeatures.ProtoReflect.Descriptor instead.
func (*PlanFeatures) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{11}
}

func (x *PlanFeatures) GetMaxDiscoveryPerMonth() int32 {
	if x != nil {
		return x.MaxDiscoveryPerMonth
	}
	return 0
}

func (x *PlanFeatures) GetMaxRadiusKm() float64 {
	if x != nil {
		return x.MaxRadiusKm
	}
	return 0
}

func (x *PlanFeatures) GetUnlimitedChats() bool {
	if x != nil {
		return x.UnlimitedChats
	}
	return false
}

func (x *PlanFeatures) GetPrioritySupport() bool {
	if x != nil {
		return x.PrioritySupport
	}
	return false
}

type UsageMetrics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CurrentPeriod  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=current_period,json=currentPeriod,proto3" json:"current_period,omitempty"`
	DiscoveryCount int32                  `protobuf:"varint,3,opt,name=discovery_count,json=discoveryCount,proto3" json:"discovery_count,omitempty"`
	DiscoveryLimit int32                  `protobuf:"varint,4,opt,name=discovery_limit,json=discoveryLimit,proto3" json:"discovery_limit,omitempty"`
	RadiusUsedKm   float64                `protobuf:"fixed64,5,opt,name=radius_used_km,json=radiusUsedKm,proto3" json:"radius_used_km,omitempty"`
	RadiusLimitKm  float64                `protobuf:"fixed64,6,opt,name=radius_limit_km,json=radiusLimitKm,proto3" json:"radius_limit_km,omitempty"`
	DaysRemaining  int32                  `protobuf:"varint,7,opt,name=days_remaining,json=daysRemaining,proto3" json:"days_remaining,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UsageMetrics) Reset() {
	*x = UsageMetrics{}
	mi := &file_subscription_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMetrics) ProtoMessage() {}

func (x *UsageMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMetrics.ProtoReflect.Descriptor instead.
func (*UsageMetrics) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{12}
}

func (x *UsageMetrics) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UsageMetrics) GetCurrentPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPeriod
	}
	return nil
}

func (x *UsageMetrics) GetDiscoveryCount() int32 {
	if x != nil {
		return x.DiscoveryCount
	}
	return 0
}

func (x *UsageMetrics) GetDiscoveryLimit() int32 {
	if x != nil {
		return x.DiscoveryLimit
	}
	return 0
}

func (x *UsageMetrics) GetRadiusUsedKm() float64 {
	if x != nil {
		return x.RadiusUsedKm
	}
	return 0
}

func (x *UsageMetrics) GetRadiusLimitKm() float64 {
	if x != nil {
		return x.RadiusLimitKm
	}
	return 0
}

func (x *UsageMetrics) GetDaysRemaining() int32 {
	if x != nil {
		return x.DaysRemaining
	}
	return 0
}

var File_subscription_proto protoreflect.FileDescriptor

const file_subscription_proto_rawDesc = "" +
	"\n" +
	"\x12subscription.proto\x12\fsubscription\x1a\x1fgoogle/protobuf/timestamp.proto\"/\n" +
	"\x14GetUserLimitsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"\x81\x01\n" +
	"\x15GetUserLimitsResponse\x128\n" +
	"\x06limits\x18\x01 \x01(\v2 .subscription.SubscriptionLimitsR\x06limits\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"N\n" +
	"\x19CheckFeatureAccessRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x18\n" +
	"\afeature\x18\x02 \x01(\tR\afeature\"\x83\x01\n" +
	"\x1aCheckFeatureAccessResponse\x12\x1d\n" +
	"\n" +
	"has_access\x18\x01 \x01(\bR\thasAccess\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\"d\n" +
	"\x12RecordUsageRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1f\n" +
	"\vmetric_type\x18\x02 \x01(\tR\n" +
	"metricType\x12\x14\n" +
	"\x05count\x18\x03 \x01(\x05R\x05count\"n\n" +
	"\x13RecordUsageResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12'\n" +
	"\x0fremaining_count\x18\x03 \x01(\x05R\x0eremainingCount\"7\n" +
	"\x1cGetSubscriptionStatusRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"\xc5\x01\n" +
	"\x1dGetSubscriptionStatusResponse\x12B\n" +
	"\fsubscription\x18\x01 \x01(\v2\x1e.subscription.UserSubscriptionR\fsubscription\x120\n" +
	"\x05usage\x18\x02 \x01(\v2\x1a.subscription.UsageMetricsR\x05usage\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\"\x86\x03\n" +
	"\x12SubscriptionLimits\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x12\n" +
	"\x04tier\x18\x02 \x01(\tR\x04tier\x125\n" +
	"\x17max_discovery_per_month\x18\x03 \x01(\x05R\x14maxDiscoveryPerMonth\x12\"\n" +
	"\rmax_radius_km\x18\x04 \x01(\x01R\vmaxRadiusKm\x123\n" +
	"\x15remaining_discoveries\x18\x05 \x01(\x05R\x14remainingDiscoveries\x12L\n" +
	"\x14current_period_start\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x12currentPeriodStart\x12H\n" +
	"\x12current_period_end\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x10currentPeriodEnd\x12\x1b\n" +
	"\tis_active\x18\b \x01(\bR\bisActive\"\x97\x03\n" +
	"\x10UserSubscription\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x122\n" +
	"\x04plan\x18\x03 \x01(\v2\x1e.subscription.SubscriptionPlanR\x04plan\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status\x12L\n" +
	"\x14current_period_start\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x12currentPeriodStart\x12H\n" +
	"\x12current_period_end\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x10currentPeriodEnd\x12;\n" +
	"\vcanceled_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"canceledAt\x129\n" +
	"\n" +
	"created_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"\xdc\x01\n" +
	"\x10SubscriptionPlan\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04tier\x18\x03 \x01(\tR\x04tier\x12\x1f\n" +
	"\vprice_cents\x18\x04 \x01(\x05R\n" +
	"priceCents\x12\x1a\n" +
	"\bcurrency\x18\x05 \x01(\tR\bcurrency\x126\n" +
	"\bfeatures\x18\x06 \x01(\v2\x1a.subscription.PlanFeaturesR\bfeatures\x12\x1b\n" +
	"\tis_active\x18\a \x01(\bR\bisActive\"\xbd\x01\n" +
	"\fPlanFeatures\x125\n" +
	"\x17max_discovery_per_month\x18\x01 \x01(\x05R\x14maxDiscoveryPerMonth\x12\"\n" +
	"\rmax_radius_km\x18\x02 \x01(\x01R\vmaxRadiusKm\x12'\n" +
	"\x0funlimited_chats\x18\x03 \x01(\bR\x0eunlimitedChats\x12)\n" +
	"\x10priority_support\x18\x04 \x01(\bR\x0fprioritySupport\"\xb1\x02\n" +
	"\fUsageMetrics\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12A\n" +
	"\x0ecurrent_period\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\rcurrentPeriod\x12'\n" +
	"\x0fdiscovery_count\x18\x03 \x01(\x05R\x0ediscoveryCount\x12'\n" +
	"\x0fdiscovery_limit\x18\x04 \x01(\x05R\x0ediscoveryLimit\x12$\n" +
	"\x0eradius_used_km\x18\x05 \x01(\x01R\fradiusUsedKm\x12&\n" +
	"\x0fradius_limit_km\x18\x06 \x01(\x01R\rradiusLimitKm\x12%\n" +
	"\x0edays_remaining\x18\a \x01(\x05R\rdaysRemaining2\x80\x04\n" +
	"\x13SubscriptionService\x12X\n" +
	"\rGetUserLimits\x12\".subscription.GetUserLimitsRequest\x1a#.subscription.GetUserLimitsResponse\x12g\n" +
	"\x12CheckFeatureAccess\x12'.subscription.CheckFeatureAccessRequest\x1a(.subscription.CheckFeatureAccessResponse\x12R\n" +
	"\vRecordUsage\x12 .subscription.RecordUsageRequest\x1a!.subscription.RecordUsageResponse\x12`\n" +
	"\x19AtomicCheckAndRecordUsage\x12 .subscription.RecordUsageRequest\x1a!.subscription.RecordUsageResponse\x12p\n" +
	"\x15GetSubscriptionStatus\x12*.subscription.GetSubscriptionStatusRequest\x1a+.subscription.GetSubscriptionStatusResponseB0Z.github.com/link-app/backend/proto/subscriptionb\x06proto3"

var (
	file_subscription_proto_rawDescOnce sync.Once
	file_subscription_proto_rawDescData []byte
)

func file_subscription_proto_rawDescGZIP() []byte {
	file_subscription_proto_rawDescOnce.Do(func() {
		file_subscription_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_subscription_proto_rawDesc), len(file_subscription_proto_rawDesc)))
	})
	return file_subscription_proto_rawDescData
}

var file_subscription_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_subscription_proto_goTypes = []any{
	(*GetUserLimitsRequest)(nil),          // 0: subscription.GetUserLimitsRequest
	(*GetUserLimitsResponse)(nil),         // 1: subscription.GetUserLimitsResponse
	(*CheckFeatureAccessRequest)(nil),     // 2: subscription.CheckFeatureAccessRequest
	(*CheckFeatureAccessResponse)(nil),    // 3: subscription.CheckFeatureAccessResponse
	(*RecordUsageRequest)(nil),            // 4: subscription.RecordUsageRequest
	(*RecordUsageResponse)(nil),           // 5: subscription.RecordUsageResponse
	(*GetSubscriptionStatusRequest)(nil),  // 6: subscription.GetSubscriptionStatusRequest
	(*GetSubscriptionStatusResponse)(nil), // 7: subscription.GetSubscriptionStatusResponse
	(*SubscriptionLimits)(nil),            // 8: subscription.SubscriptionLimits
	(*UserSubscription)(nil),              // 9: subscription.UserSubscription
	(*SubscriptionPlan)(nil),              // 10: subscription.SubscriptionPlan
	(*PlanFeatures)(nil),                  // 11: subscription.PlanFeatures
	(*UsageMetrics)(nil),                  // 12: subscription.UsageMetrics
	(*timestamppb.Timestamp)(nil),         // 13: google.protobuf.Timestamp
}
var file_subscription_proto_depIdxs = []int32{
	8,  // 0: subscription.GetUserLimitsResponse.limits:type_name -> subscription.SubscriptionLimits
	9,  // 1: subscription.GetSubscriptionStatusResponse.subscription:type_name -> subscription.UserSubscription
	12, // 2: subscription.GetSubscriptionStatusResponse.usage:type_name -> subscription.UsageMetrics
	13, // 3: subscription.SubscriptionLimits.current_period_start:type_name -> google.protobuf.Timestamp
	13, // 4: subscription.SubscriptionLimits.current_period_end:type_name -> google.protobuf.Timestamp
	10, // 5: subscription.UserSubscription.plan:type_name -> subscription.SubscriptionPlan
	13, // 6: subscription.UserSubscription.current_period_start:type_name -> google.protobuf.Timestamp
	13, // 7: subscription.UserSubscription.current_period_end:type_name -> google.protobuf.Timestamp
	13, // 8: subscription.UserSubscription.canceled_at:type_name -> google.protobuf.Timestamp
	13, // 9: subscription.UserSubscription.created_at:type_name -> google.protobuf.Timestamp
	11, // 10: subscription.SubscriptionPlan.features:type_name -> subscription.PlanFeatures
	13, // 11: subscription.UsageMetrics.current_period:type_name -> google.protobuf.Timestamp
	0,  // 12: subscription.SubscriptionService.GetUserLimits:input_type -> subscription.GetUserLimitsRequest
	2,  // 13: subscription.SubscriptionService.CheckFeatureAccess:input_type -> subscription.CheckFeatureAccessRequest
	4,  // 14: subscription.SubscriptionService.RecordUsage:input_type -> subscription.RecordUsageRequest
	4,  // 15: subscription.SubscriptionService.AtomicCheckAndRecordUsage:input_type -> subscription.RecordUsageRequest
	6,  // 16: subscription.SubscriptionService.GetSubscriptionStatus:input_type -> subscription.GetSubscriptionStatusRequest
	1,  // 17: subscription.SubscriptionService.GetUserLimits:output_type -> subscription.GetUserLimitsResponse
	3,  // 18: subscription.SubscriptionService.CheckFeatureAccess:output_type -> subscription.CheckFeatureAccessResponse
	5,  // 19: subscription.SubscriptionService.RecordUsage:output_type -> subscription.RecordUsageResponse
	5,  // 20: subscription.SubscriptionService.AtomicCheckAndRecordUsage:output_type -> subscription.RecordUsageResponse
	7,  // 21: subscription.SubscriptionService.GetSubscriptionStatus:output_type -> subscription.GetSubscriptionStatusResponse
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_subscription_proto_init() }
func file_subscription_proto_init() {
	if File_subscription_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_subscription_proto_rawDesc), len(file_subscription_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subscription_proto_goTypes,
		DependencyIndexes: file_subscription_proto_depIdxs,
		MessageInfos:      file_subscription_proto_msgTypes,
	}.Build()
	File_subscription_proto = out.File
	file_subscription_proto_goTypes = nil
	file_subscription_proto_depIdxs = nil
}
