// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/search/search_service.proto

package search

import (
	context "context"
	common "github.com/link-app/backend/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SearchService_Search_FullMethodName                = "/search.SearchService/Search"
	SearchService_UpdateUserEmbedding_FullMethodName   = "/search.SearchService/UpdateUserEmbedding"
	SearchService_DeleteUserEmbedding_FullMethodName   = "/search.SearchService/DeleteUserEmbedding"
	SearchService_HasUserEmbedding_FullMethodName      = "/search.SearchService/HasUserEmbedding"
	SearchService_BatchUpdateEmbeddings_FullMethodName = "/search.SearchService/BatchUpdateEmbeddings"
	SearchService_Reindex_FullMethodName               = "/search.SearchService/Reindex"
	SearchService_GetReindexStatus_FullMethodName      = "/search.SearchService/GetReindexStatus"
	SearchService_StreamReindexProgress_FullMethodName = "/search.SearchService/StreamReindexProgress"
	SearchService_Health_FullMethodName                = "/search.SearchService/Health"
)

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Search Service definition
type SearchServiceClient interface {
	// Perform semantic search on user profiles
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Update user profile embedding
	UpdateUserEmbedding(ctx context.Context, in *UpdateUserEmbeddingRequest, opts ...grpc.CallOption) (*UpdateUserEmbeddingResponse, error)
	// Delete user profile embedding
	DeleteUserEmbedding(ctx context.Context, in *DeleteUserEmbeddingRequest, opts ...grpc.CallOption) (*DeleteUserEmbeddingResponse, error)
	// Check if user has embedding
	HasUserEmbedding(ctx context.Context, in *HasUserEmbeddingRequest, opts ...grpc.CallOption) (*HasUserEmbeddingResponse, error)
	// Batch update embeddings
	BatchUpdateEmbeddings(ctx context.Context, in *BatchUpdateEmbeddingsRequest, opts ...grpc.CallOption) (*BatchUpdateEmbeddingsResponse, error)
	// Trigger reindexing of user profiles
	Reindex(ctx context.Context, in *ReindexRequest, opts ...grpc.CallOption) (*ReindexResponse, error)
	// Get reindex job status
	GetReindexStatus(ctx context.Context, in *ReindexStatusRequest, opts ...grpc.CallOption) (*ReindexStatusResponse, error)
	// Stream reindex progress
	StreamReindexProgress(ctx context.Context, in *StreamReindexRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReindexProgress], error)
	// Health check
	Health(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, SearchService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) UpdateUserEmbedding(ctx context.Context, in *UpdateUserEmbeddingRequest, opts ...grpc.CallOption) (*UpdateUserEmbeddingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserEmbeddingResponse)
	err := c.cc.Invoke(ctx, SearchService_UpdateUserEmbedding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteUserEmbedding(ctx context.Context, in *DeleteUserEmbeddingRequest, opts ...grpc.CallOption) (*DeleteUserEmbeddingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserEmbeddingResponse)
	err := c.cc.Invoke(ctx, SearchService_DeleteUserEmbedding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) HasUserEmbedding(ctx context.Context, in *HasUserEmbeddingRequest, opts ...grpc.CallOption) (*HasUserEmbeddingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasUserEmbeddingResponse)
	err := c.cc.Invoke(ctx, SearchService_HasUserEmbedding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) BatchUpdateEmbeddings(ctx context.Context, in *BatchUpdateEmbeddingsRequest, opts ...grpc.CallOption) (*BatchUpdateEmbeddingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpdateEmbeddingsResponse)
	err := c.cc.Invoke(ctx, SearchService_BatchUpdateEmbeddings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) Reindex(ctx context.Context, in *ReindexRequest, opts ...grpc.CallOption) (*ReindexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReindexResponse)
	err := c.cc.Invoke(ctx, SearchService_Reindex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetReindexStatus(ctx context.Context, in *ReindexStatusRequest, opts ...grpc.CallOption) (*ReindexStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReindexStatusResponse)
	err := c.cc.Invoke(ctx, SearchService_GetReindexStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) StreamReindexProgress(ctx context.Context, in *StreamReindexRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReindexProgress], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[0], SearchService_StreamReindexProgress_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamReindexRequest, ReindexProgress]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_StreamReindexProgressClient = grpc.ServerStreamingClient[ReindexProgress]

func (c *searchServiceClient) Health(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.HealthCheckResponse)
	err := c.cc.Invoke(ctx, SearchService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility.
//
// Search Service definition
type SearchServiceServer interface {
	// Perform semantic search on user profiles
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Update user profile embedding
	UpdateUserEmbedding(context.Context, *UpdateUserEmbeddingRequest) (*UpdateUserEmbeddingResponse, error)
	// Delete user profile embedding
	DeleteUserEmbedding(context.Context, *DeleteUserEmbeddingRequest) (*DeleteUserEmbeddingResponse, error)
	// Check if user has embedding
	HasUserEmbedding(context.Context, *HasUserEmbeddingRequest) (*HasUserEmbeddingResponse, error)
	// Batch update embeddings
	BatchUpdateEmbeddings(context.Context, *BatchUpdateEmbeddingsRequest) (*BatchUpdateEmbeddingsResponse, error)
	// Trigger reindexing of user profiles
	Reindex(context.Context, *ReindexRequest) (*ReindexResponse, error)
	// Get reindex job status
	GetReindexStatus(context.Context, *ReindexStatusRequest) (*ReindexStatusResponse, error)
	// Stream reindex progress
	StreamReindexProgress(*StreamReindexRequest, grpc.ServerStreamingServer[ReindexProgress]) error
	// Health check
	Health(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error)
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearchServiceServer struct{}

func (UnimplementedSearchServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchServiceServer) UpdateUserEmbedding(context.Context, *UpdateUserEmbeddingRequest) (*UpdateUserEmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmbedding not implemented")
}
func (UnimplementedSearchServiceServer) DeleteUserEmbedding(context.Context, *DeleteUserEmbeddingRequest) (*DeleteUserEmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserEmbedding not implemented")
}
func (UnimplementedSearchServiceServer) HasUserEmbedding(context.Context, *HasUserEmbeddingRequest) (*HasUserEmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUserEmbedding not implemented")
}
func (UnimplementedSearchServiceServer) BatchUpdateEmbeddings(context.Context, *BatchUpdateEmbeddingsRequest) (*BatchUpdateEmbeddingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateEmbeddings not implemented")
}
func (UnimplementedSearchServiceServer) Reindex(context.Context, *ReindexRequest) (*ReindexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reindex not implemented")
}
func (UnimplementedSearchServiceServer) GetReindexStatus(context.Context, *ReindexStatusRequest) (*ReindexStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReindexStatus not implemented")
}
func (UnimplementedSearchServiceServer) StreamReindexProgress(*StreamReindexRequest, grpc.ServerStreamingServer[ReindexProgress]) error {
	return status.Errorf(codes.Unimplemented, "method StreamReindexProgress not implemented")
}
func (UnimplementedSearchServiceServer) Health(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}
func (UnimplementedSearchServiceServer) testEmbeddedByValue()                       {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	// If the following call pancis, it indicates UnimplementedSearchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_UpdateUserEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).UpdateUserEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_UpdateUserEmbedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).UpdateUserEmbedding(ctx, req.(*UpdateUserEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteUserEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteUserEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_DeleteUserEmbedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteUserEmbedding(ctx, req.(*DeleteUserEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_HasUserEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasUserEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).HasUserEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_HasUserEmbedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).HasUserEmbedding(ctx, req.(*HasUserEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_BatchUpdateEmbeddings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateEmbeddingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).BatchUpdateEmbeddings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_BatchUpdateEmbeddings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).BatchUpdateEmbeddings(ctx, req.(*BatchUpdateEmbeddingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_Reindex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReindexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Reindex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_Reindex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Reindex(ctx, req.(*ReindexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetReindexStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReindexStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetReindexStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetReindexStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetReindexStatus(ctx, req.(*ReindexStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_StreamReindexProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReindexRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServiceServer).StreamReindexProgress(m, &grpc.GenericServerStream[StreamReindexRequest, ReindexProgress]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_StreamReindexProgressServer = grpc.ServerStreamingServer[ReindexProgress]

func _SearchService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Health(ctx, req.(*common.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchService_Search_Handler,
		},
		{
			MethodName: "UpdateUserEmbedding",
			Handler:    _SearchService_UpdateUserEmbedding_Handler,
		},
		{
			MethodName: "DeleteUserEmbedding",
			Handler:    _SearchService_DeleteUserEmbedding_Handler,
		},
		{
			MethodName: "HasUserEmbedding",
			Handler:    _SearchService_HasUserEmbedding_Handler,
		},
		{
			MethodName: "BatchUpdateEmbeddings",
			Handler:    _SearchService_BatchUpdateEmbeddings_Handler,
		},
		{
			MethodName: "Reindex",
			Handler:    _SearchService_Reindex_Handler,
		},
		{
			MethodName: "GetReindexStatus",
			Handler:    _SearchService_GetReindexStatus_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _SearchService_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReindexProgress",
			Handler:       _SearchService_StreamReindexProgress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/search/search_service.proto",
}
