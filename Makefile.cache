# Build Cache Management Makefile
# Provides commands for managing build caches and optimized development workflows

.PHONY: help cache-info cache-clean cache-prune cache-reset dev-cached

# Colors for output
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

help: ## Show this help message
	@echo "$(GREEN)Build Cache Management Commands:$(NC)"
	@awk 'BEGIN {FS = ":.*##"} /^[a-zA-Z_-]+:.*##/ {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

cache-info: ## Show Docker build cache information
	@echo "$(GREEN)Docker Build Cache Information:$(NC)"
	@docker system df
	@echo "\n$(GREEN)Docker Volumes (including cache):$(NC)"
	@docker volume ls | grep -E "(go_|node_|vite_|cache)" || echo "No build cache volumes found"

cache-clean: ## Clean Docker build cache (keeps volumes)
	@echo "$(YELLOW)Cleaning Docker build cache...$(NC)"
	docker builder prune -f
	@echo "$(GREEN)Docker build cache cleaned$(NC)"

cache-prune: ## Prune unused Docker build cache and volumes
	@echo "$(YELLOW)Pruning unused Docker resources...$(NC)"
	docker system prune -f
	docker volume prune -f
	@echo "$(GREEN)Unused Docker resources pruned$(NC)"

cache-reset: ## Reset all build caches (destructive)
	@echo "$(RED)WARNING: This will remove all build caches!$(NC)"
	@read -p "Are you sure? [y/N] " confirm && [ "$$confirm" = "y" ]
	docker builder prune -a -f
	docker volume ls -q | grep -E "(go_|node_|vite_|cache)" | xargs -r docker volume rm
	@echo "$(GREEN)All build caches reset$(NC)"

dev-cached: ## Start development environment with build caching enabled
	@echo "$(GREEN)Starting development environment with build caching...$(NC)"
	docker-compose -f docker-compose.yml -f docker-compose.cache.yml up -d
	@echo "$(GREEN)Development environment started with caching enabled$(NC)"

dev-frontend-cached: ## Start frontend development with caching
	@echo "$(GREEN)Starting frontend development with caching...$(NC)"
	docker-compose -f docker-compose.yml -f docker-compose.cache.yml --profile frontend-dev up frontend-dev
	@echo "$(GREEN)Frontend development started with caching$(NC)"

build-optimize: ## Build all services with optimization flags
	@echo "$(GREEN)Building all services with optimization...$(NC)"
	@for service in user-svc chat-svc summarygen-svc discovery-svc search-svc api-gateway; do \
		echo "$(YELLOW)Building $$service...$(NC)"; \
		docker build \
			--build-arg BUILDKIT_INLINE_CACHE=1 \
			--cache-from ghcr.io/$(shell git config --get remote.origin.url | sed 's/.*[\/:]\([^\/]*\)\/\([^.]*\).*/\1\/\2/')-$$service:latest \
			-t $$service:latest \
			-f backend/$$service/Dockerfile \
			backend/; \
	done
	@echo "$(GREEN)All services built with optimization$(NC)"

# Go-specific cache commands
go-cache-info: ## Show Go module cache information
	@echo "$(GREEN)Go Module Cache Information:$(NC)"
	@docker run --rm -v go_mod_cache:/cache alpine du -sh /cache 2>/dev/null || echo "No Go cache volume found"

go-cache-clean: ## Clean Go module cache
	@echo "$(YELLOW)Cleaning Go module cache...$(NC)"
	docker run --rm -v go_mod_cache:/cache alpine rm -rf /cache/* 2>/dev/null || echo "No Go cache to clean"
	@echo "$(GREEN)Go module cache cleaned$(NC)"

# Node.js-specific cache commands  
node-cache-info: ## Show Node.js cache information
	@echo "$(GREEN)Node.js Cache Information:$(NC)"
	@docker run --rm -v node_modules_cache:/cache alpine du -sh /cache 2>/dev/null || echo "No Node cache volume found"

node-cache-clean: ## Clean Node.js cache
	@echo "$(YELLOW)Cleaning Node.js cache...$(NC)"
	docker run --rm -v node_modules_cache:/cache alpine rm -rf /cache/* 2>/dev/null || echo "No Node cache to clean"
	docker run --rm -v vite_cache:/cache alpine rm -rf /cache/* 2>/dev/null || echo "No Vite cache to clean"
	@echo "$(GREEN)Node.js cache cleaned$(NC)"