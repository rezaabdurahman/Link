export interface ProfileMedia {
  type: 'image' | 'video';
  url: string;
  thumbnail?: string; // For videos, optional thumbnail image
  duration?: number; // For videos, duration in seconds
}

export interface User {
  id: string;
  first_name: string;
  last_name?: string;
  age: number;
  profilePicture?: string; // Deprecated - use profileMedia instead
  profileMedia?: ProfileMedia; // New unified media field
  bio: string;
  interests: string[];
  location: {
    lat: number;
    lng: number;
    proximityMiles: number;
  };
  isAvailable: boolean;
  mutualFriends: string[];
  connectionPriority: 'want-closer' | 'regular';
  lastSeen: Date;
  broadcast?: string;
  profileType: 'public' | 'private';
}

export interface Message {
  id: string;
  senderId: string;
  receiverId: string;
  content: string;
  timestamp: Date;
  type: 'text' | 'system' | 'context-card' | 'permission-request' | 'permission-response' | 'queued';
  contextCard?: ContextCard;
  permissionData?: {
    originalMessage: string;
    senderName: string;
    isApproved?: boolean;
    queuedMessageId?: string;
  };
}

export interface ContextCard {
  type: 'conversation-starter' | 'event-suggestion' | 'connection-expander';
  title: string;
  description: string;
  actionText?: string;
}

export interface Chat {
  id: string;
  participantId: string;
  participantName: string;
  participantAvatar: string;
  lastMessage: Message;
  unreadCount: number;
  conversationSummary: string;
  priority: number;
  messages?: Message[];
  isFriend?: boolean; // New property to track friendship status
}


export interface FriendProfile {
  userId: string;
  publicProfile: User;
  privateNotes: string;
  autoGeneratedProfile: {
    keyMoments: string[];
    preferences: string[];
    lastConversations: string[];
    milestones: string[];
  };
  unknownAboutYou: string[];
  unknownAboutThem: string[];
}

export interface Opportunity {
  id: string;
  type: 'reminder' | 'group-pairing' | 'ai-suggestion' | 'seasonal';
  title: string;
  description: string;
  suggestedFriends: string[];
  activityType: 'grocery' | 'lunch' | 'walk' | 'event' | 'other';
  dueDate?: Date;
  location?: string;
}

// Authentication Types

/**
 * Authentication token with metadata
 * Mirrors backend token structure with strict nullability
 */
export interface AuthToken {
  readonly token: string;
  readonly expiresAt: string;
  readonly tokenType: 'Bearer';
  readonly issuedAt: string;
}

// Social Link Interface - mirroring backend
export interface SocialLink {
  readonly platform: string;
  readonly url: string;
  readonly username?: string;
}

// Privacy Settings Interface - mirroring backend
export interface PrivacySettings {
  readonly show_age: boolean;
  readonly show_location: boolean;
  readonly show_mutual_friends: boolean;
  readonly show_name: boolean;
  readonly show_social_media: boolean;
  readonly show_montages: boolean;
  readonly show_checkins: boolean;
}

/**
 * Authentication user data mirroring backend ProfileUser structure
 * Uses readonly properties where appropriate for immutability
 */
export interface AuthUser {
  readonly id: string;
  readonly email: string;
  readonly username: string;
  readonly first_name: string;
  readonly last_name: string;
  readonly date_of_birth?: string; // ISO string format
  readonly profile_picture?: string | null;
  readonly bio?: string | null;
  readonly location?: string | null;
  readonly interests: string[];
  readonly social_links: SocialLink[];
  readonly additional_photos: string[];
  readonly privacy_settings: PrivacySettings;
  readonly email_verified: boolean;
  readonly created_at: string; // ISO string format
  readonly updated_at: string; // ISO string format
}

/**
 * Authentication state with strict nullability
 * Represents the complete authentication status of the application
 */
export interface AuthState {
  readonly user: AuthUser | null;
  readonly token: AuthToken | null;
  readonly isLoading: boolean;
  readonly error: string | null;
  readonly isInitialized: boolean;
}

// Authentication Utility Helpers

/**
 * Type guard to check if user is authenticated
 * @param authState - The current authentication state
 * @returns boolean indicating if user is authenticated
 */
export function isAuthenticated(authState: AuthState): authState is AuthState & {
  user: AuthUser;
  token: AuthToken;
} {
  return authState.user !== null && authState.token !== null && !authState.isLoading;
}

/**
 * Type guard to check if authentication token is valid (not expired)
 * @param token - The authentication token to validate
 * @returns boolean indicating if token is valid
 */
export function isTokenValid(token: AuthToken | null): token is AuthToken {
  if (!token) return false;
  
  const expirationTime = new Date(token.expiresAt).getTime();
  const currentTime = Date.now();
  
  // Add 5 minute buffer to account for clock skew
  return expirationTime > (currentTime + 5 * 60 * 1000);
}

/**
 * Utility to check if authentication is in progress
 * @param authState - The current authentication state
 * @returns boolean indicating if authentication is loading
 */
export function isAuthLoading(authState: AuthState): boolean {
  return authState.isLoading;
}

/**
 * Utility to get authentication error message
 * @param authState - The current authentication state
 * @returns error message or null
 */
export function getAuthError(authState: AuthState): string | null {
  return authState.error;
}

/**
 * Utility to check if authentication state is initialized
 * @param authState - The current authentication state
 * @returns boolean indicating if auth state is initialized
 */
export function isAuthInitialized(authState: AuthState): boolean {
  return authState.isInitialized;
}

/**
 * Create initial authentication state
 * @returns Initial auth state with null values
 */
export function createInitialAuthState(): AuthState {
  return {
    user: null,
    token: null,
    isLoading: false,
    error: null,
    isInitialized: false,
  } as const;
}

// Social Notes Types
export interface SocialNote {
  id: string;
  friendId: string;
  text: string;
  updatedAt: Date;
}

// Close Friends Management
export interface CloseFriend {
  userId: string;
  addedAt: Date;
}
