version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:16-alpine
    container_name: link_postgres
    environment:
      POSTGRES_DB: linkdb
      POSTGRES_USER: ${DB_USER:-linkuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-linkpass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/infrastructure/database/init:/docker-entrypoint-initdb.d
    networks:
      - link_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-linkuser} -d linkdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: link_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - link_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  pgbouncer:
    build:
      context: ./backend/infrastructure/pgbouncer
      dockerfile: Dockerfile
    container_name: link_pgbouncer
    ports:
      - "5433:5432"
    environment:
      # Service database passwords (to be generated by Terraform)
      - USER_SERVICE_DB_PASSWORD=${USER_SERVICE_DB_PASSWORD:-userpass}
      - CHAT_SERVICE_DB_PASSWORD=${CHAT_SERVICE_DB_PASSWORD:-chatpass}
      - AI_SERVICE_DB_PASSWORD=${AI_SERVICE_DB_PASSWORD:-aipass}
      - DISCOVERY_SERVICE_DB_PASSWORD=${DISCOVERY_SERVICE_DB_PASSWORD:-discoverypass}
      - SEARCH_SERVICE_DB_PASSWORD=${SEARCH_SERVICE_DB_PASSWORD:-searchpass}
      - LOCATION_SERVICE_DB_PASSWORD=${LOCATION_SERVICE_DB_PASSWORD:-locationpass}
      - STORIES_SERVICE_DB_PASSWORD=${STORIES_SERVICE_DB_PASSWORD:-storiespass}
      - OPPORTUNITIES_SERVICE_DB_PASSWORD=${OPPORTUNITIES_SERVICE_DB_PASSWORD:-opportunitiespass}
      # Legacy password
      - DB_PASSWORD=${DB_PASSWORD:-linkpass}
      # PgBouncer admin passwords
      - PGBOUNCER_ADMIN_PASSWORD=${PGBOUNCER_ADMIN_PASSWORD:-admin_secure_password}
      - PGBOUNCER_STATS_PASSWORD=${PGBOUNCER_STATS_PASSWORD:-stats_secure_password}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - link_network
    healthcheck:
      test: ["/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Enhanced API Gateway with Load Balancing
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: link_api_gateway_enhanced
    ports:
      - "8080:8080"
    environment:
      - PORT=:8080
      - LOG_LEVEL=info
      
      # Multi-instance service configuration
      - USER_SVC_INSTANCES=user-1:http://user-svc-1:8080:http://user-svc-1:8080/health:100:30s,user-2:http://user-svc-2:8080:http://user-svc-2:8080/health:100:30s,user-3:http://user-svc-3:8080:http://user-svc-3:8080/health:100:30s
      - CHAT_SVC_INSTANCES=chat-1:http://chat-svc-1:8080:http://chat-svc-1:8080/health:100:30s,chat-2:http://chat-svc-2:8080:http://chat-svc-2:8080/health:100:30s
      - AI_SVC_INSTANCES=ai-1:http://ai-svc-1:8000:http://ai-svc-1:8000/health:100:45s,ai-2:http://ai-svc-2:8000:http://ai-svc-2:8000/health:100:45s
      - DISCOVERY_SVC_INSTANCES=discovery-1:http://discovery-svc-1:8080:http://discovery-svc-1:8080/health:100:30s
      - LOCATION_SVC_INSTANCES=location-1:http://location-svc-1:8080:http://location-svc-1:8080/health:100:30s,location-2:http://location-svc-2:8080:http://location-svc-2:8080/health:100:30s
      
      # Load balancing strategies
      - USER_SVC_LOAD_BALANCE_STRATEGY=round_robin
      - CHAT_SVC_LOAD_BALANCE_STRATEGY=round_robin
      - AI_SVC_LOAD_BALANCE_STRATEGY=least_connections
      - DISCOVERY_SVC_LOAD_BALANCE_STRATEGY=round_robin
      - LOCATION_SVC_LOAD_BALANCE_STRATEGY=round_robin
      
      # Circuit breaker configuration
      - USER_SVC_CIRCUIT_BREAKER=5:3:60s
      - CHAT_SVC_CIRCUIT_BREAKER=5:3:60s
      - AI_SVC_CIRCUIT_BREAKER=3:2:120s
      - DISCOVERY_SVC_CIRCUIT_BREAKER=5:3:60s
      - LOCATION_SVC_CIRCUIT_BREAKER=5:3:60s
      
      # Retry configuration
      - USER_SVC_RETRY=3:100ms:5s:2.0
      - CHAT_SVC_RETRY=3:100ms:5s:2.0
      - AI_SVC_RETRY=2:200ms:10s:2.0
      - DISCOVERY_SVC_RETRY=3:100ms:5s:2.0
      - LOCATION_SVC_RETRY=3:100ms:5s:2.0
      
      # Health check configuration
      - USER_SVC_HEALTH_CHECK=30s:10s:5s
      - CHAT_SVC_HEALTH_CHECK=30s:10s:5s
      - AI_SVC_HEALTH_CHECK=30s:15s:10s
      - DISCOVERY_SVC_HEALTH_CHECK=30s:10s:5s
      - LOCATION_SVC_HEALTH_CHECK=30s:10s:5s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
    networks:
      - link_network
    volumes:
      - ./backend/shared:/app/shared:ro

  # User Service Instances
  user-svc-1:
    build:
      context: ./backend/user-svc
      dockerfile: Dockerfile
    container_name: link_user_svc_1
    ports:
      - "8081:8080"
    environment:
      - DB_HOST=pgbouncer
      - DB_PORT=5432
      - DB_NAME=user_service
      - DB_USER=${USER_SERVICE_DB_USER:-user_service}
      - DB_PASSWORD=${USER_SERVICE_DB_PASSWORD:-userpass}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE_ID=user-1
    depends_on:
      pgbouncer:
        condition: service_healthy
    networks:
      - link_network
    volumes:
      - ./backend/shared:/app/shared:ro

  user-svc-2:
    build:
      context: ./backend/user-svc
      dockerfile: Dockerfile
    container_name: link_user_svc_2
    ports:
      - "8091:8080"
    environment:
      - DB_HOST=pgbouncer
      - DB_PORT=5432
      - DB_NAME=user_service
      - DB_USER=${USER_SERVICE_DB_USER:-user_service}
      - DB_PASSWORD=${USER_SERVICE_DB_PASSWORD:-userpass}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE_ID=user-2
    depends_on:
      pgbouncer:
        condition: service_healthy
    networks:
      - link_network
    volumes:
      - ./backend/shared:/app/shared:ro

  user-svc-3:
    build:
      context: ./backend/user-svc
      dockerfile: Dockerfile
    container_name: link_user_svc_3
    ports:
      - "8092:8080"
    environment:
      - DB_HOST=pgbouncer
      - DB_PORT=5432
      - DB_NAME=user_service
      - DB_USER=${USER_SERVICE_DB_USER:-user_service}
      - DB_PASSWORD=${USER_SERVICE_DB_PASSWORD:-userpass}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE_ID=user-3
    depends_on:
      pgbouncer:
        condition: service_healthy
    networks:
      - link_network
    volumes:
      - ./backend/shared:/app/shared:ro

  # Chat Service Instances
  chat-svc-1:
    build:
      context: ./backend/chat-svc
      dockerfile: Dockerfile
    container_name: link_chat_svc_1
    ports:
      - "8083:8080"
    environment:
      - DB_HOST=pgbouncer
      - DB_PORT=5432
      - DB_NAME=chat_service
      - DB_USER=${CHAT_SERVICE_DB_USER:-chat_service}
      - DB_PASSWORD=${CHAT_SERVICE_DB_PASSWORD:-chatpass}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE_ID=chat-1
    depends_on:
      pgbouncer:
        condition: service_healthy
    networks:
      - link_network
    volumes:
      - ./backend/shared:/app/shared:ro

  chat-svc-2:
    build:
      context: ./backend/chat-svc
      dockerfile: Dockerfile
    container_name: link_chat_svc_2
    ports:
      - "8093:8080"
    environment:
      - DB_HOST=pgbouncer
      - DB_PORT=5432
      - DB_NAME=chat_service
      - DB_USER=${CHAT_SERVICE_DB_USER:-chat_service}
      - DB_PASSWORD=${CHAT_SERVICE_DB_PASSWORD:-chatpass}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE_ID=chat-2
    depends_on:
      pgbouncer:
        condition: service_healthy
    networks:
      - link_network
    volumes:
      - ./backend/shared:/app/shared:ro

  # AI Service Instances
  ai-svc-1:
    build:
      context: ./backend/ai-svc
      dockerfile: Dockerfile
    container_name: link_ai_svc_1
    ports:
      - "8084:8000"
    environment:
      - DB_HOST=pgbouncer
      - DB_PORT=5432
      - DB_NAME=ai_service
      - DB_USER=${AI_SERVICE_DB_USER:-ai_service}
      - DB_PASSWORD=${AI_SERVICE_DB_PASSWORD:-aipass}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE_ID=ai-1
    depends_on:
      pgbouncer:
        condition: service_healthy
    networks:
      - link_network
    volumes:
      - ./backend/shared:/app/shared:ro

  ai-svc-2:
    build:
      context: ./backend/ai-svc
      dockerfile: Dockerfile
    container_name: link_ai_svc_2
    ports:
      - "8094:8000"
    environment:
      - DB_HOST=pgbouncer
      - DB_PORT=5432
      - DB_NAME=ai_service
      - DB_USER=${AI_SERVICE_DB_USER:-ai_service}
      - DB_PASSWORD=${AI_SERVICE_DB_PASSWORD:-aipass}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE_ID=ai-2
    depends_on:
      pgbouncer:
        condition: service_healthy
    networks:
      - link_network
    volumes:
      - ./backend/shared:/app/shared:ro

  # Discovery Service Instance
  discovery-svc-1:
    build:
      context: ./backend/discovery-svc
      dockerfile: Dockerfile
    container_name: link_discovery_svc_1
    ports:
      - "8087:8080"
    environment:
      - DB_HOST=pgbouncer
      - DB_PORT=5432
      - DB_NAME=discovery_service
      - DB_USER=${DISCOVERY_SERVICE_DB_USER:-discovery_service}
      - DB_PASSWORD=${DISCOVERY_SERVICE_DB_PASSWORD:-discoverypass}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE_ID=discovery-1
    depends_on:
      pgbouncer:
        condition: service_healthy
    networks:
      - link_network
    volumes:
      - ./backend/shared:/app/shared:ro

  # Location Service Instances
  location-svc-1:
    build:
      context: ./backend/location-svc
      dockerfile: Dockerfile
    container_name: link_location_svc_1
    ports:
      - "8082:8080"
    environment:
      - DB_HOST=pgbouncer
      - DB_PORT=5432
      - DB_NAME=location_service
      - DB_USER=${LOCATION_SERVICE_DB_USER:-location_service}
      - DB_PASSWORD=${LOCATION_SERVICE_DB_PASSWORD:-locationpass}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE_ID=location-1
    depends_on:
      pgbouncer:
        condition: service_healthy
    networks:
      - link_network
    volumes:
      - ./backend/shared:/app/shared:ro

  location-svc-2:
    build:
      context: ./backend/location-svc
      dockerfile: Dockerfile
    container_name: link_location_svc_2
    ports:
      - "8095:8080"
    environment:
      - DB_HOST=pgbouncer
      - DB_PORT=5432
      - DB_NAME=location_service
      - DB_USER=${LOCATION_SERVICE_DB_USER:-location_service}
      - DB_PASSWORD=${LOCATION_SERVICE_DB_PASSWORD:-locationpass}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - INSTANCE_ID=location-2
    depends_on:
      pgbouncer:
        condition: service_healthy
    networks:
      - link_network
    volumes:
      - ./backend/shared:/app/shared:ro

  # Frontend (for development)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: link_frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://api-gateway:8080
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - api-gateway
    networks:
      - link_network
    volumes:
      - ./src:/app/src
      - ./public:/app/public

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: link_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - link_network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: link_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - link_network
    depends_on:
      - prometheus

networks:
  link_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
