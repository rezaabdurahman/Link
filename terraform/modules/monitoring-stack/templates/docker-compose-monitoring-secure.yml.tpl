# Secure Monitoring Stack Docker Compose Configuration
# Generated by Terraform monitoring-stack module
# Environment: ${environment}

version: '3.8'

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

services:
  # Reverse Proxy with SSL termination
  nginx:
    image: nginx:1.25-alpine
    container_name: monitoring-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      # SSL certificates
      - ${ssl_cert_path}:/etc/ssl/certs/monitoring.crt:ro
      - ${ssl_key_path}:/etc/ssl/private/monitoring.key:ro
      - ${ca_cert_path}:/etc/ssl/certs/ca.crt:ro
      # Nginx configuration
      - ${nginx_config_path}:/etc/nginx/conf.d/default.conf:ro
      - ${htpasswd_path}:/etc/nginx/htpasswd:ro
    depends_on:
      - grafana
      - prometheus
      - jaeger
      - alertmanager
    networks:
      monitoring:
        ipv4_address: 172.20.0.10
    environment:
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
    labels:
      - "traefik.enable=false"
      - "com.centurylinklabs.watchtower.enable=false"

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: monitoring-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=15GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=https://${monitoring_domain}/prometheus/'
      - '--web.route-prefix=/prometheus/'
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus:/etc/prometheus:ro
    networks:
      monitoring:
        ipv4_address: 172.20.0.20
    user: "65534:65534"
    environment:
      - TZ=UTC

  # Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: monitoring-grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      monitoring:
        ipv4_address: 172.20.0.30
    environment:
      # Security
      - GF_SECURITY_ADMIN_PASSWORD=${grafana_admin_password}
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=false
      
      # Server configuration
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_DOMAIN=${monitoring_domain}
      - GF_SERVER_ROOT_URL=https://${monitoring_domain}/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      
      # Database (SQLite for simplicity)
      - GF_DATABASE_TYPE=sqlite3
      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db
      
      # Users and authentication
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      
      # Anonymous access (disabled)
      - GF_AUTH_ANONYMOUS_ENABLED=false
      
      # Logging
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=info
      
      # Metrics
      - GF_METRICS_ENABLED=true
      
      # Feature flags
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      
      # Session
      - GF_SESSION_PROVIDER=memory
      - GF_SESSION_COOKIE_SECURE=true
      
      # Timezone
      - TZ=UTC
    user: "472:0"

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: monitoring-jaeger
    restart: unless-stopped
    networks:
      monitoring:
        ipv4_address: 172.20.0.40
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - QUERY_BASE_PATH=/jaeger
      - TZ=UTC
    command:
      - --query.base-path=/jaeger
      - --admin.http.host-port=:14269
      - --collector.otlp.grpc.host-port=:14317
      - --collector.otlp.http.host-port=:14318

  # AlertManager
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: monitoring-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://${monitoring_domain}/alertmanager/'
      - '--web.route-prefix=/alertmanager/'
    volumes:
      - alertmanager_data:/alertmanager
      - ./alertmanager:/etc/alertmanager:ro
    networks:
      monitoring:
        ipv4_address: 172.20.0.50
    user: "65534:65534"
    environment:
      - TZ=UTC

  # Redis for caching and session storage
  redis:
    image: redis:7.2-alpine
    container_name: monitoring-redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${redis_password}
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
    volumes:
      - ./redis-data:/data
    networks:
      monitoring:
        ipv4_address: 172.20.0.60
    environment:
      - TZ=UTC

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: monitoring-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      monitoring:
        ipv4_address: 172.20.0.70
    user: "65534:65534"
    environment:
      - TZ=UTC

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: monitoring-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    networks:
      monitoring:
        ipv4_address: 172.20.0.80
    command:
      - '--housekeeping_interval=30s'
      - '--docker_only=true'
    environment:
      - TZ=UTC
