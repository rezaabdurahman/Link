#!/bin/bash
# Automated Database Backup Script
# Generated by Terraform service-databases module

set -euo pipefail

# Configuration
POSTGRES_HOST="${postgres_host}"
POSTGRES_PORT="${postgres_port}"
BACKUP_DIR="/var/backups/postgresql"
RETENTION_DAYS=${retention_days}
LOG_FILE="/var/log/postgresql-backup.log"

# Service databases to backup
DATABASES=(${join(" ", databases)})

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

# Function to log messages
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Function to backup a single database
backup_database() {
    local db_name="$1"
    local backup_file="$BACKUP_DIR/$${db_name}_backup_$(date +%Y%m%d_%H%M%S).sql.gz"
    
    log "Starting backup of database: $db_name"
    
    if pg_dump -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -d "$db_name" --no-password --clean --if-exists | gzip > "$backup_file"; then
        log "Successfully backed up $db_name to $backup_file"
        return 0
    else
        log "ERROR: Failed to backup $db_name"
        return 1
    fi
}

# Function to clean old backups
cleanup_old_backups() {
    log "Cleaning up backups older than $RETENTION_DAYS days"
    find "$BACKUP_DIR" -name "*.sql.gz" -mtime +$RETENTION_DAYS -delete
}

# Main backup process
log "Starting database backup process"

backup_errors=0
for db in "$${DATABASES[@]}"; do
    if ! backup_database "$db"; then
        ((backup_errors++))
    fi
done

# Cleanup old backups
cleanup_old_backups

# Report results
if [ $backup_errors -eq 0 ]; then
    log "All databases backed up successfully"
    exit 0
else
    log "ERROR: $backup_errors database(s) failed to backup"
    exit 1
fi
