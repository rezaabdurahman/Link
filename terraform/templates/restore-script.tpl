#!/bin/bash
# Database Restore Script
# Generated by Terraform service-databases module

set -euo pipefail

POSTGRES_HOST="${postgres_host}"
POSTGRES_PORT="${postgres_port}"

# Available service databases
%{ for service, config in service_databases ~}
# ${service}: ${config.database_name} (${config.username})
%{ endfor ~}

usage() {
    echo "Usage: $0 <service> <backup_file>"
    echo "Available services:"
%{ for service, config in service_databases ~}
    echo "  ${service} - ${config.database_name}"
%{ endfor ~}
    exit 1
}

if [ $# -ne 2 ]; then
    usage
fi

SERVICE="$1"
BACKUP_FILE="$2"

case "$SERVICE" in
%{ for service, config in service_databases ~}
    "${service}")
        DATABASE="${config.database_name}"
        ;;
%{ endfor ~}
    *)
        echo "ERROR: Unknown service '$SERVICE'"
        usage
        ;;
esac

if [ ! -f "$BACKUP_FILE" ]; then
    echo "ERROR: Backup file '$BACKUP_FILE' not found"
    exit 1
fi

echo "Restoring $SERVICE database from $BACKUP_FILE"
echo "WARNING: This will overwrite the existing $DATABASE database!"
read -p "Continue? (yes/no): " confirm

if [ "$confirm" != "yes" ]; then
    echo "Restore cancelled"
    exit 0
fi

echo "Restoring database..."
if zcat "$BACKUP_FILE" | psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -d "$DATABASE" --no-password; then
    echo "Successfully restored $SERVICE database"
else
    echo "ERROR: Failed to restore $SERVICE database"
    exit 1
fi
