---
# ConfigMap for secure PostgreSQL initialization
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-secure-init-script
  namespace: link-services
  labels:
    app: postgres-cluster
    component: database-init
data:
  init.sql: |
    -- PostgreSQL Secure Initialization Script
    -- This script uses environment variables populated from Kubernetes secrets
    
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
    ALTER SYSTEM SET shared_preload_libraries = 'pg_stat_statements';
    
    -- Create service-specific databases
    CREATE DATABASE user_service_db OWNER linkuser;
    CREATE DATABASE chat_service_db OWNER linkuser;
    CREATE DATABASE discovery_service_db OWNER linkuser;
    CREATE DATABASE search_service_db OWNER linkuser;
    CREATE DATABASE ai_service_db OWNER linkuser;
    CREATE DATABASE feature_service_db OWNER linkuser;
    
    -- Create service-specific users with passwords from secrets
    -- Note: The passwords will be substituted during initialization
    CREATE USER user_service_user;
    CREATE USER chat_service_user;
    CREATE USER discovery_service_user;
    CREATE USER search_service_user;
    CREATE USER ai_service_user;
    CREATE USER feature_service_user;
    
    -- Grant database permissions
    GRANT ALL PRIVILEGES ON DATABASE user_service_db TO user_service_user;
    GRANT ALL PRIVILEGES ON DATABASE chat_service_db TO chat_service_user;
    GRANT ALL PRIVILEGES ON DATABASE discovery_service_db TO discovery_service_user;
    GRANT ALL PRIVILEGES ON DATABASE search_service_db TO search_service_user;
    GRANT ALL PRIVILEGES ON DATABASE ai_service_db TO ai_service_user;
    GRANT ALL PRIVILEGES ON DATABASE feature_service_db TO feature_service_user;
    
    -- Create replication user
    CREATE USER streaming_replica WITH REPLICATION;
    
    -- Set up row-level security templates
    CREATE OR REPLACE FUNCTION setup_rls_for_service(schema_name text) RETURNS void AS $$
    BEGIN
        EXECUTE format('ALTER SCHEMA %I ENABLE ROW LEVEL SECURITY', schema_name);
        -- Add additional RLS policies as needed
    END;
    $$ LANGUAGE plpgsql;
    
    -- Performance optimizations
    CREATE OR REPLACE FUNCTION optimize_database_for_service(db_name text) RETURNS void AS $$
    BEGIN
        -- Set up connection limits per service
        EXECUTE format('ALTER DATABASE %I SET default_transaction_isolation = ''read committed''', db_name);
        EXECUTE format('ALTER DATABASE %I SET log_statement = ''ddl''', db_name);
        EXECUTE format('ALTER DATABASE %I SET log_min_duration_statement = 1000', db_name);
    END;
    $$ LANGUAGE plpgsql;
    
    -- Apply optimizations
    SELECT optimize_database_for_service('user_service_db');
    SELECT optimize_database_for_service('chat_service_db');
    SELECT optimize_database_for_service('discovery_service_db');
    SELECT optimize_database_for_service('search_service_db');
    SELECT optimize_database_for_service('ai_service_db');
    SELECT optimize_database_for_service('feature_service_db');

---
# Job to set passwords securely after cluster initialization
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-secure-password-setup
  namespace: link-services
  labels:
    app: postgres-cluster
    component: password-setup
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: password-setup
        image: postgres:15-alpine
        env:
        - name: PGHOST
          value: "postgres-cluster-rw"
        - name: PGPORT
          value: "5432"
        - name: PGDATABASE
          value: "linkdb"
        - name: PGUSER
          value: "linkuser"
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-admin-passwords
              key: password
        # Service passwords from external secrets
        - name: USER_SERVICE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-service-passwords
              key: user-service-password
        - name: CHAT_SERVICE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-service-passwords
              key: chat-service-password
        - name: DISCOVERY_SERVICE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-service-passwords
              key: discovery-service-password
        - name: SEARCH_SERVICE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-service-passwords
              key: search-service-password
        - name: AI_SERVICE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-service-passwords
              key: ai-service-password
        - name: STREAMING_REPLICA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-service-passwords
              key: streaming-replica-password
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Setting up secure passwords for database users..."
          
          # Wait for database to be ready
          until pg_isready -h $PGHOST -p $PGPORT; do
            echo "Waiting for database..."
            sleep 2
          done
          
          # Set passwords for service users
          psql -c "ALTER USER user_service_user WITH ENCRYPTED PASSWORD '$USER_SERVICE_PASSWORD';"
          psql -c "ALTER USER chat_service_user WITH ENCRYPTED PASSWORD '$CHAT_SERVICE_PASSWORD';"
          psql -c "ALTER USER discovery_service_user WITH ENCRYPTED PASSWORD '$DISCOVERY_SERVICE_PASSWORD';"
          psql -c "ALTER USER search_service_user WITH ENCRYPTED PASSWORD '$SEARCH_SERVICE_PASSWORD';"
          psql -c "ALTER USER ai_service_user WITH ENCRYPTED PASSWORD '$AI_SERVICE_PASSWORD';"
          psql -c "ALTER USER streaming_replica WITH ENCRYPTED PASSWORD '$STREAMING_REPLICA_PASSWORD';"
          
          echo "Database passwords updated successfully!"
      serviceAccountName: postgres-password-setup
      
---
# ServiceAccount for password setup job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-password-setup
  namespace: link-services
  labels:
    app: postgres-cluster
    component: password-setup