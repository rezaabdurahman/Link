apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: link-internal
  labels:
    app: pgbouncer
    component: connection-pool
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: pgbouncer
  template:
    metadata:
      labels:
        app: pgbouncer
        component: connection-pool
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9127"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - pgbouncer
              topologyKey: kubernetes.io/hostname
      containers:
      - name: pgbouncer
        image: pgbouncer/pgbouncer:1.21.0
        ports:
        - containerPort: 5432
          name: postgresql
          protocol: TCP
        - containerPort: 9127
          name: metrics
          protocol: TCP
        env:
        # Service database passwords (from secrets)
        - name: USER_SERVICE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: user-service-db-secret
              key: password
        - name: CHAT_SERVICE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: chat-service-db-secret
              key: password
        - name: AI_SERVICE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ai-service-db-secret
              key: password
        - name: DISCOVERY_SERVICE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: discovery-service-db-secret
              key: password
        - name: SEARCH_SERVICE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: search-service-db-secret
              key: password
        - name: LOCATION_SERVICE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: location-service-db-secret
              key: password
        - name: STORIES_SERVICE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: stories-service-db-secret
              key: password
        - name: OPPORTUNITIES_SERVICE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: opportunities-service-db-secret
              key: password
        # Legacy password
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        # PgBouncer admin passwords
        - name: PGBOUNCER_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pgbouncer-admin-secret
              key: admin-password
        - name: PGBOUNCER_STATS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pgbouncer-admin-secret
              key: stats-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - /etc/pgbouncer/scripts/health-check.sh
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -h localhost -p 5432
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /etc/pgbouncer/pgbouncer.ini
          subPath: pgbouncer.ini
          readOnly: true
        - name: scripts-volume
          mountPath: /etc/pgbouncer/scripts
          readOnly: true
        command: ["/bin/sh", "-c"]
        args:
        - |
          cp /etc/pgbouncer/scripts/startup.sh /usr/local/bin/startup.sh
          cp /etc/pgbouncer/scripts/health-check.sh /usr/local/bin/health-check.sh
          chmod +x /usr/local/bin/startup.sh /usr/local/bin/health-check.sh
          exec /usr/local/bin/startup.sh
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
      # PgBouncer Exporter sidecar for Prometheus metrics
      - name: pgbouncer-exporter
        image: prometheuscommunity/pgbouncer-exporter:v0.7.0
        ports:
        - containerPort: 9127
          name: metrics
          protocol: TCP
        env:
        - name: PGBOUNCER_EXPORTER_HOST
          value: "localhost"
        - name: PGBOUNCER_EXPORTER_PORT
          value: "5432"
        - name: PGBOUNCER_USER
          value: "pgbouncer_stats"
        - name: PGBOUNCER_PASS
          valueFrom:
            secretKeyRef:
              name: pgbouncer-admin-secret
              key: stats-password
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: pgbouncer-config
          items:
          - key: pgbouncer.ini
            path: pgbouncer.ini
      - name: scripts-volume
        configMap:
          name: pgbouncer-config
          defaultMode: 0755
          items:
          - key: startup.sh
            path: startup.sh
          - key: health-check.sh
            path: health-check.sh
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
