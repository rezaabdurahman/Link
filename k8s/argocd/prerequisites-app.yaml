---
# ArgoCD Application for Prerequisites (Namespaces, Secrets, RBAC)
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: link-prerequisites
  namespace: argocd
  labels:
    app.kubernetes.io/name: link-prerequisites
    app.kubernetes.io/part-of: link-platform
    app.kubernetes.io/component: prerequisites
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "-2"  # Deploy first, before everything else
spec:
  project: default
  
  source:
    repoURL: https://github.com/RezaAbdurahman/Link.git
    targetRevision: HEAD
    path: k8s/foundations
    directory:
      include: '*.yaml'
  
  destination:
    server: https://kubernetes.default.svc
    namespace: default  # Creates resources in multiple namespaces
  
  syncPolicy:
    automated:
      prune: false  # Don't auto-prune secrets and RBAC
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    - ApplyOutOfSyncOnly=true
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 2m
  
  # Don't sync secrets automatically - they may contain sensitive data
  ignoreDifferences:
  - group: ""
    kind: Secret
    jsonPointers:
    - /data
  - group: ""
    kind: ServiceAccount
    jsonPointers:
    - /secrets
  
  info:
  - name: 'Components'
    value: 'Namespaces + Secrets + ServiceAccounts + RBAC'
  - name: 'Purpose'
    value: 'Foundation resources required by all other applications'

---
# ArgoCD Application for External Secrets Operator
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: external-secrets-operator
  namespace: argocd
  labels:
    app.kubernetes.io/name: external-secrets-operator
    app.kubernetes.io/part-of: link-platform
    app.kubernetes.io/component: secrets-management
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "-1"  # Deploy after prerequisites but before apps
spec:
  project: default
  
  source:
    repoURL: https://charts.external-secrets.io
    chart: external-secrets
    targetRevision: 0.9.11
    helm:
      values: |
        installCRDs: true
        replicaCount: 2
        
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        
        serviceMonitor:
          enabled: true
          namespace: monitoring
        
        # Security settings
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
        
        # Pod disruption budget for HA
        podDisruptionBudget:
          enabled: true
          minAvailable: 1
  
  destination:
    server: https://kubernetes.default.svc
    namespace: external-secrets-system
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    retry:
      limit: 3
      backoff:
        duration: 10s
        factor: 2
        maxDuration: 5m
  
  ignoreDifferences:
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas
  
  info:
  - name: 'Purpose'
    value: 'External Secrets Operator for AWS/GCP/Azure integration'
  - name: 'Features'
    value: 'Sync secrets from external stores (AWS Secrets Manager, etc.)'

---
# ArgoCD Application for Cert-Manager
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cert-manager
  namespace: argocd
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/part-of: link-platform
    app.kubernetes.io/component: certificates
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "-1"  # Deploy early for TLS certificates
spec:
  project: default
  
  source:
    repoURL: https://charts.jetstack.io
    chart: cert-manager
    targetRevision: v1.13.2
    helm:
      values: |
        installCRDs: true
        replicaCount: 2
        
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        
        # Enable Prometheus monitoring
        prometheus:
          enabled: true
          servicemonitor:
            enabled: true
            namespace: monitoring
        
        # Security settings
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
        
        # Pod disruption budget
        podDisruptionBudget:
          enabled: true
          minAvailable: 1
        
        # Webhook settings for HA
        webhook:
          replicaCount: 2
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 250m
              memory: 128Mi
        
        # CA Injector settings
        cainjector:
          replicaCount: 2
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 250m
              memory: 128Mi
  
  destination:
    server: https://kubernetes.default.svc
    namespace: cert-manager
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 10s
        factor: 2
        maxDuration: 5m
  
  ignoreDifferences:
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas
  - group: cert-manager.io
    kind: Certificate
    jsonPointers:
    - /status
  
  info:
  - name: 'Purpose'
    value: 'Automatic TLS certificate management'
  - name: 'Features'
    value: 'Let\'s Encrypt + DNS validation + auto-renewal'

---
# ArgoCD Application for Ingress NGINX Controller
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ingress-nginx
  namespace: argocd
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: link-platform
    app.kubernetes.io/component: ingress
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "-1"  # Deploy early for ingress
spec:
  project: default
  
  source:
    repoURL: https://kubernetes.github.io/ingress-nginx
    chart: ingress-nginx
    targetRevision: 4.8.3
    helm:
      values: |
        controller:
          replicaCount: 3  # HA setup
          
          # Resource settings
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 512Mi
          
          # Service configuration
          service:
            type: LoadBalancer
            annotations:
              service.beta.kubernetes.io/aws-load-balancer-type: nlb
              service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
          
          # Pod disruption budget
          podDisruptionBudget:
            enabled: true
            minAvailable: 2
          
          # Metrics and monitoring
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
              namespace: monitoring
          
          # Security settings
          config:
            ssl-protocols: "TLSv1.2 TLSv1.3"
            ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384"
            hide-headers: "Server,X-Powered-By"
            server-tokens: "false"
            use-gzip: "true"
            gzip-level: "6"
            enable-brotli: "true"
            
          # Autoscaling
          autoscaling:
            enabled: true
            minReplicas: 3
            maxReplicas: 10
            targetCPUUtilizationPercentage: 70
            targetMemoryUtilizationPercentage: 80
        
        # Default backend for 404 pages
        defaultBackend:
          enabled: true
          replicaCount: 2
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
            limits:
              cpu: 50m
              memory: 40Mi
  
  destination:
    server: https://kubernetes.default.svc
    namespace: ingress-nginx
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 10s
        factor: 2
        maxDuration: 5m
  
  ignoreDifferences:
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas  # Allow HPA to manage replicas
  - group: autoscaling
    kind: HorizontalPodAutoscaler
    jsonPointers:
    - /status
  
  info:
  - name: 'Purpose'
    value: 'High-availability NGINX ingress controller'
  - name: 'Features'
    value: '3+ replicas + autoscaling + TLS termination + metrics'

---
# ArgoCD AppProject for Prerequisites and Platform Components
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: link-prerequisites
  namespace: argocd
  labels:
    app.kubernetes.io/name: link-prerequisites
    app.kubernetes.io/part-of: link-platform
spec:
  description: Link platform prerequisites and foundational components
  
  sourceRepos:
  - 'https://github.com/RezaAbdurahman/Link.git'
  - 'https://charts.external-secrets.io'
  - 'https://charts.jetstack.io'
  - 'https://kubernetes.github.io/ingress-nginx'
  
  destinations:
  - namespace: default
    server: https://kubernetes.default.svc
  - namespace: external-secrets-system
    server: https://kubernetes.default.svc
  - namespace: cert-manager
    server: https://kubernetes.default.svc
  - namespace: ingress-nginx
    server: https://kubernetes.default.svc
  - namespace: link-services
    server: https://kubernetes.default.svc
  - namespace: link-dev
    server: https://kubernetes.default.svc
  - namespace: link-staging
    server: https://kubernetes.default.svc
  - namespace: link-production
    server: https://kubernetes.default.svc
  - namespace: monitoring
    server: https://kubernetes.default.svc
  
  clusterResourceWhitelist:
  - group: ''
    kind: Namespace
  - group: apiextensions.k8s.io
    kind: CustomResourceDefinition
  - group: rbac.authorization.k8s.io
    kind: ClusterRole
  - group: rbac.authorization.k8s.io
    kind: ClusterRoleBinding
  - group: admissionregistration.k8s.io
    kind: ValidatingAdmissionWebhook
  - group: admissionregistration.k8s.io
    kind: MutatingAdmissionWebhook
  - group: external-secrets.io
    kind: ClusterSecretStore
  - group: cert-manager.io
    kind: ClusterIssuer
  - group: networking.k8s.io
    kind: IngressClass
  
  namespaceResourceWhitelist:
  - group: ''
    kind: Secret
  - group: ''
    kind: ConfigMap
  - group: ''
    kind: Service
  - group: ''
    kind: ServiceAccount
  - group: apps
    kind: Deployment
  - group: apps
    kind: ReplicaSet
  - group: apps
    kind: DaemonSet
  - group: policy
    kind: PodDisruptionBudget
  - group: autoscaling
    kind: HorizontalPodAutoscaler
  - group: external-secrets.io
    kind: SecretStore
  - group: external-secrets.io
    kind: ExternalSecret
  - group: cert-manager.io
    kind: Certificate
  - group: cert-manager.io
    kind: Issuer
  - group: monitoring.coreos.com
    kind: ServiceMonitor
  
  roles:
  - name: prerequisites-admin
    description: Full access to platform prerequisites
    policies:
    - p, proj:link-prerequisites:prerequisites-admin, applications, *, link-prerequisites/*, allow
    groups:
    - link-platform-team
    - link-sre-team
  
  - name: prerequisites-readonly
    description: Read-only access to prerequisites
    policies:
    - p, proj:link-prerequisites:prerequisites-readonly, applications, get, link-prerequisites/*, allow
    groups:
    - link-dev-team