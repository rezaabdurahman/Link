---
# ArgoCD Application for Redis Cluster HA
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: redis-cluster-ha
  namespace: argocd
  labels:
    app.kubernetes.io/name: redis-cluster-ha
    app.kubernetes.io/part-of: link-infrastructure
    app.kubernetes.io/component: cache
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  project: default
  
  source:
    repoURL: https://github.com/RezaAbdurahman/Link.git
    targetRevision: HEAD
    path: k8s/infrastructure/cache
    directory:
      include: 'redis-*.yaml'
  
  destination:
    server: https://kubernetes.default.svc
    namespace: link-services
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 2m
  
  ignoreDifferences:
  - group: apps
    kind: StatefulSet
    jsonPointers:
    - /spec/replicas
  - group: ""
    kind: Secret
    jsonPointers:
    - /data
  
  info:
  - name: 'Service Type'
    value: 'Redis High Availability Cluster'
  - name: 'Replicas'
    value: '6 nodes (3 masters + 3 replicas)'

---
# ArgoCD Application for Redis Sentinel HA
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: redis-sentinel-ha
  namespace: argocd
  labels:
    app.kubernetes.io/name: redis-sentinel-ha
    app.kubernetes.io/part-of: link-infrastructure
    app.kubernetes.io/component: cache
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  project: default
  
  source:
    repoURL: https://github.com/RezaAbdurahman/Link.git
    targetRevision: HEAD
    path: k8s/infrastructure/cache
    directory:
      include: 'redis-sentinel-ha.yaml'
  
  destination:
    server: https://kubernetes.default.svc
    namespace: link-services
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 2m
  
  ignoreDifferences:
  - group: apps
    kind: StatefulSet
    jsonPointers:
    - /spec/replicas
  
  info:
  - name: 'Service Type'
    value: 'Redis Sentinel High Availability'
  - name: 'Architecture'
    value: 'Master-Slave with Sentinel monitoring'

---
# ArgoCD Application for Qdrant Vector Database
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: qdrant-cluster
  namespace: argocd
  labels:
    app.kubernetes.io/name: qdrant-cluster
    app.kubernetes.io/part-of: link-infrastructure
    app.kubernetes.io/component: vector-db
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: default
  
  source:
    repoURL: https://github.com/RezaAbdurahman/Link.git
    targetRevision: HEAD
    path: k8s/infrastructure/vector-db
    directory:
      include: 'qdrant-*.yaml'
  
  destination:
    server: https://kubernetes.default.svc
    namespace: link-services
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 2m
  
  ignoreDifferences:
  - group: apps
    kind: StatefulSet
    jsonPointers:
    - /spec/replicas
  - group: ""
    kind: PersistentVolumeClaim
    jsonPointers:
    - /spec/resources/requests/storage
  
  info:
  - name: 'Service Type'
    value: 'Vector Database for Search & Embeddings'
  - name: 'Purpose'
    value: 'Semantic search and AI-powered recommendations'

---
# ArgoCD Application for Qdrant Backup Jobs
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: qdrant-backup
  namespace: argocd
  labels:
    app.kubernetes.io/name: qdrant-backup
    app.kubernetes.io/part-of: link-infrastructure
    app.kubernetes.io/component: backup
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "2"  # After Qdrant cluster
spec:
  project: default
  
  source:
    repoURL: https://github.com/RezaAbdurahman/Link.git
    targetRevision: HEAD
    path: k8s/infrastructure/vector-db
    directory:
      include: 'qdrant-backup-cronjob.yaml'
  
  destination:
    server: https://kubernetes.default.svc
    namespace: link-services
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - ServerSideApply=true
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 2m
  
  info:
  - name: 'Service Type'
    value: 'Automated Qdrant Vector DB Backups'
  - name: 'Schedule'
    value: 'Daily backups with retention policy'

---
# ArgoCD Application for Linkerd Service Mesh
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: linkerd-config
  namespace: argocd
  labels:
    app.kubernetes.io/name: linkerd-config
    app.kubernetes.io/part-of: link-infrastructure
    app.kubernetes.io/component: service-mesh
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  project: default
  
  source:
    repoURL: https://github.com/RezaAbdurahman/Link.git
    targetRevision: HEAD
    path: k8s/linkerd
    directory:
      include: '{linkerd-production-config.yaml,services-with-mtls.yaml}'
  
  destination:
    server: https://kubernetes.default.svc
    namespace: linkerd
  
  syncPolicy:
    # Manual sync for service mesh changes
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 2m
  
  ignoreDifferences:
  - group: linkerd.io
    kind: ServiceProfile
    jsonPointers:
    - /status
  
  info:
  - name: 'Service Type'
    value: 'Service Mesh Configuration'
  - name: 'Features'
    value: 'mTLS + Traffic Management + Observability'

---
# ArgoCD Application for Linkerd Monitoring
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: linkerd-monitoring
  namespace: argocd
  labels:
    app.kubernetes.io/name: linkerd-monitoring
    app.kubernetes.io/part-of: link-infrastructure
    app.kubernetes.io/component: observability
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "1"  # After Linkerd config
spec:
  project: default
  
  source:
    repoURL: https://github.com/RezaAbdurahman/Link.git
    targetRevision: HEAD
    path: k8s/linkerd
    directory:
      include: 'linkerd-monitoring.yaml'
  
  destination:
    server: https://kubernetes.default.svc
    namespace: linkerd-viz
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 2m
  
  info:
  - name: 'Service Type'
    value: 'Linkerd Observability Stack'
  - name: 'Components'
    value: 'Prometheus + Grafana + Jaeger'

---
# ArgoCD AppProject for Infrastructure
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: link-infrastructure
  namespace: argocd
  labels:
    app.kubernetes.io/name: link-infrastructure
    app.kubernetes.io/part-of: link-platform
spec:
  description: Link infrastructure components (Redis, Qdrant, Linkerd, etc.)
  
  sourceRepos:
  - 'https://github.com/RezaAbdurahman/Link.git'
  
  destinations:
  - namespace: redis-system
    server: https://kubernetes.default.svc
  - namespace: qdrant-system
    server: https://kubernetes.default.svc
  - namespace: linkerd
    server: https://kubernetes.default.svc
  - namespace: linkerd-viz
    server: https://kubernetes.default.svc
  - namespace: monitoring
    server: https://kubernetes.default.svc
  
  clusterResourceWhitelist:
  - group: ''
    kind: Namespace
  - group: apiextensions.k8s.io
    kind: CustomResourceDefinition
  - group: rbac.authorization.k8s.io
    kind: ClusterRole
  - group: rbac.authorization.k8s.io
    kind: ClusterRoleBinding
  - group: policy.linkerd.io
    kind: ServerAuthorization
  - group: linkerd.io
    kind: ServiceProfile
  - group: storage.k8s.io
    kind: StorageClass
  
  namespaceResourceWhitelist:
  - group: ''
    kind: Secret
  - group: ''
    kind: ConfigMap
  - group: ''
    kind: Service
  - group: ''
    kind: ServiceAccount
  - group: ''
    kind: PersistentVolumeClaim
  - group: apps
    kind: Deployment
  - group: apps
    kind: StatefulSet
  - group: apps
    kind: DaemonSet
  - group: policy
    kind: PodDisruptionBudget
  - group: autoscaling
    kind: HorizontalPodAutoscaler
  - group: batch
    kind: CronJob
  - group: batch
    kind: Job
  - group: monitoring.coreos.com
    kind: ServiceMonitor
  - group: monitoring.coreos.com
    kind: PrometheusRule
  - group: networking.k8s.io
    kind: NetworkPolicy
  
  roles:
  - name: infrastructure-admin
    description: Full access to infrastructure components
    policies:
    - p, proj:link-infrastructure:infrastructure-admin, applications, *, link-infrastructure/*, allow
    groups:
    - link-platform-team
    - link-sre-team
  
  - name: infrastructure-readonly
    description: Read-only access to infrastructure
    policies:
    - p, proj:link-infrastructure:infrastructure-readonly, applications, get, link-infrastructure/*, allow
    groups:
    - link-dev-team