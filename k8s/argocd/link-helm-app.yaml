---
# ArgoCD Application for Link Helm Chart - Development Environment
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: link-app-dev
  namespace: argocd
  labels:
    app.kubernetes.io/name: link-app-dev
    app.kubernetes.io/part-of: link-platform
    app.kubernetes.io/component: helm-app
    app.kubernetes.io/environment: development
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "3"  # After infrastructure is ready
spec:
  project: default
  
  source:
    repoURL: https://github.com/RezaAbdurahman/Link.git
    targetRevision: HEAD
    path: k8s/helm/link-app
    helm:
      valueFiles:
        - values.yaml
        - values-dev.yaml
      parameters:
        - name: global.environment
          value: development
        - name: global.image.tag
          value: dev-latest
        - name: replicaCount
          value: "1"  # Single replica for dev
        - name: resources.requests.memory
          value: "256Mi"
        - name: resources.requests.cpu
          value: "100m"
        - name: ingress.host
          value: dev.linkapp.com
  
  destination:
    server: https://kubernetes.default.svc
    namespace: link-dev
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  ignoreDifferences:
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas
  
  info:
  - name: 'Environment'
    value: 'Development - Single replica, minimal resources'
  - name: 'Domain'
    value: 'dev.linkapp.com'

---
# ArgoCD Application for Link Helm Chart - Staging Environment
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: link-app-staging
  namespace: argocd
  labels:
    app.kubernetes.io/name: link-app-staging
    app.kubernetes.io/part-of: link-platform
    app.kubernetes.io/component: helm-app
    app.kubernetes.io/environment: staging
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "3"  # After infrastructure is ready
spec:
  project: default
  
  source:
    repoURL: https://github.com/RezaAbdurahman/Link.git
    targetRevision: HEAD
    path: k8s/helm/link-app
    helm:
      valueFiles:
        - values.yaml
        - values-staging.yaml
      parameters:
        - name: global.environment
          value: staging
        - name: global.image.tag
          value: staging-latest
        - name: replicaCount
          value: "2"  # 2 replicas for staging
        - name: resources.requests.memory
          value: "512Mi"
        - name: resources.requests.cpu
          value: "250m"
        - name: ingress.host
          value: staging.linkapp.com
        - name: postgresql.enabled
          value: "false"  # Use external managed PostgreSQL
        - name: redis.enabled
          value: "false"  # Use external Redis cluster
  
  destination:
    server: https://kubernetes.default.svc
    namespace: link-staging
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  ignoreDifferences:
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas
  
  info:
  - name: 'Environment'
    value: 'Staging - Production-like with 2 replicas'
  - name: 'Domain'
    value: 'staging.linkapp.com'

---
# ArgoCD Application for Link Helm Chart - Production Environment
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: link-app-production
  namespace: argocd
  labels:
    app.kubernetes.io/name: link-app-production
    app.kubernetes.io/part-of: link-platform
    app.kubernetes.io/component: helm-app
    app.kubernetes.io/environment: production
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "3"  # After infrastructure is ready
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  project: default
  
  source:
    repoURL: https://github.com/RezaAbdurahman/Link.git
    targetRevision: HEAD
    path: k8s/helm/link-app
    helm:
      valueFiles:
        - values.yaml
        - values-prod.yaml
      parameters:
        - name: global.environment
          value: production
        - name: global.image.tag
          value: v1.0.0  # Use specific version tags in production
        - name: replicaCount
          value: "3"  # 3 replicas for production HA
        - name: resources.requests.memory
          value: "1Gi"
        - name: resources.requests.cpu
          value: "500m"
        - name: resources.limits.memory
          value: "2Gi"
        - name: resources.limits.cpu
          value: "1000m"
        - name: ingress.host
          value: linkapp.com
        - name: postgresql.enabled
          value: "false"  # Use external managed PostgreSQL HA
        - name: redis.enabled
          value: "false"  # Use external Redis cluster
        - name: autoscaling.enabled
          value: "true"
        - name: autoscaling.minReplicas
          value: "3"
        - name: autoscaling.maxReplicas
          value: "10"
  
  destination:
    server: https://kubernetes.default.svc
    namespace: link-production
  
  syncPolicy:
    # Manual sync for production - require approval
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    - RespectIgnoreDifferences=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  ignoreDifferences:
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas  # Allow HPA to manage replicas
  - group: autoscaling
    kind: HorizontalPodAutoscaler
    jsonPointers:
    - /status/currentReplicas
    - /status/desiredReplicas
  
  info:
  - name: 'Environment'
    value: 'Production - HA with 3-10 replicas + autoscaling'
  - name: 'Domain'
    value: 'linkapp.com'
  - name: 'Sync Policy'
    value: 'Manual approval required for changes'

---
# ArgoCD Application for Frontend (React App)
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: link-frontend
  namespace: argocd
  labels:
    app.kubernetes.io/name: link-frontend
    app.kubernetes.io/part-of: link-platform
    app.kubernetes.io/component: frontend
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "4"  # After backend services
spec:
  project: default
  
  source:
    repoURL: https://github.com/RezaAbdurahman/Link.git
    targetRevision: HEAD
    path: k8s/helm/link-app
    helm:
      valueFiles:
        - values.yaml
        - values-prod.yaml
      parameters:
        - name: frontend.enabled
          value: "true"
        - name: frontend.replicaCount
          value: "3"
  
  destination:
    server: https://kubernetes.default.svc
    namespace: link-services
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  ignoreDifferences:
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas
  - group: networking.k8s.io
    kind: Ingress
    jsonPointers:
    - /status/loadBalancer/ingress
  
  info:
  - name: 'Framework'
    value: 'React 18 + TypeScript + Tailwind CSS'
  - name: 'Build System'
    value: 'Vite with production optimizations'

---
# ArgoCD AppProject for Helm-based Applications
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: link-helm-apps
  namespace: argocd
  labels:
    app.kubernetes.io/name: link-helm-apps
    app.kubernetes.io/part-of: link-platform
spec:
  description: Link platform Helm-based applications across environments
  
  sourceRepos:
  - 'https://github.com/RezaAbdurahman/Link.git'
  - 'https://charts.bitnami.com/bitnami'  # For PostgreSQL and Redis dependencies
  
  destinations:
  - namespace: link-dev
    server: https://kubernetes.default.svc
  - namespace: link-staging
    server: https://kubernetes.default.svc
  - namespace: link-production
    server: https://kubernetes.default.svc
  - namespace: link-services
    server: https://kubernetes.default.svc
  
  clusterResourceWhitelist:
  - group: ''
    kind: Namespace
  - group: networking.k8s.io
    kind: Ingress
  - group: rbac.authorization.k8s.io
    kind: ClusterRole
  - group: rbac.authorization.k8s.io
    kind: ClusterRoleBinding
  
  namespaceResourceWhitelist:
  - group: ''
    kind: Secret
  - group: ''
    kind: ConfigMap
  - group: ''
    kind: Service
  - group: ''
    kind: ServiceAccount
  - group: ''
    kind: PersistentVolumeClaim
  - group: apps
    kind: Deployment
  - group: apps
    kind: ReplicaSet
  - group: apps
    kind: StatefulSet
  - group: policy
    kind: PodDisruptionBudget
  - group: autoscaling
    kind: HorizontalPodAutoscaler
  - group: networking.k8s.io
    kind: NetworkPolicy
  - group: networking.k8s.io
    kind: Ingress
  - group: batch
    kind: Job
  - group: batch
    kind: CronJob
  - group: monitoring.coreos.com
    kind: ServiceMonitor
  
  roles:
  - name: helm-admin
    description: Full access to Helm applications
    policies:
    - p, proj:link-helm-apps:helm-admin, applications, *, link-helm-apps/*, allow
    groups:
    - link-platform-team
  
  - name: helm-developer
    description: Developer access to dev and staging environments
    policies:
    - p, proj:link-helm-apps:helm-developer, applications, get, link-helm-apps/link-app-dev, allow
    - p, proj:link-helm-apps:helm-developer, applications, sync, link-helm-apps/link-app-dev, allow
    - p, proj:link-helm-apps:helm-developer, applications, get, link-helm-apps/link-app-staging, allow
    - p, proj:link-helm-apps:helm-developer, applications, sync, link-helm-apps/link-app-staging, allow
    - p, proj:link-helm-apps:helm-developer, applications, get, link-helm-apps/link-frontend, allow
    - p, proj:link-helm-apps:helm-developer, applications, sync, link-helm-apps/link-frontend, allow
    groups:
    - link-dev-team
  
  - name: helm-production-operator
    description: Production deployment access (with manual approval)
    policies:
    - p, proj:link-helm-apps:helm-production-operator, applications, get, link-helm-apps/link-app-production, allow
    - p, proj:link-helm-apps:helm-production-operator, applications, sync, link-helm-apps/link-app-production, allow
    groups:
    - link-sre-team
    - link-release-team