name: CD Orchestrator - Deployment & Rollout

on:
  workflow_run:
    workflows: ["CI Orchestrator - Testing & Validation"]
    types:
      - completed
    branches: [main, develop]
      
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options: ['development', 'staging', 'production']
        default: 'staging'
      skip_tests:
        description: 'Skip deployment validation tests'
        required: false
        type: boolean
        default: false
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        type: boolean
        default: false

env:
  CD_VERSION: "v2.0"
  DEPLOYMENT_TIMEOUT: 1800 # 30 minutes total timeout

concurrency:
  group: cd-orchestrator-${{ github.ref }}-${{ inputs.environment || 'auto' }}
  cancel-in-progress: false # Don't cancel deployments in progress

jobs:
  # ================================================================
  # STAGE 0: DEPLOYMENT STRATEGY & VALIDATION
  # ================================================================
  
  deployment-strategy:
    name: 🎯 Determine Deployment Strategy
    runs-on: ubuntu-latest
    # Only run if CI passed or if manually triggered
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    outputs:
      environment: ${{ steps.strategy.outputs.environment }}
      deploy_infrastructure: ${{ steps.strategy.outputs.deploy_infrastructure }}
      deploy_services: ${{ steps.strategy.outputs.deploy_services }}
      requires_approval: ${{ steps.strategy.outputs.requires_approval }}
      deployment_type: ${{ steps.strategy.outputs.deployment_type }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}
        
    - name: Validate CI prerequisites
      if: github.event_name == 'workflow_run'
      run: |
        echo "🔍 Validating CI prerequisites..."
        echo "CI Workflow: ${{ github.event.workflow_run.name }}"
        echo "CI Status: ${{ github.event.workflow_run.conclusion }}"
        echo "CI Branch: ${{ github.event.workflow_run.head_branch }}"
        echo "CI SHA: ${{ github.event.workflow_run.head_sha }}"
        echo ""
        
        if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
          echo "❌ CI pipeline did not pass - cannot proceed with deployment"
          exit 1
        fi
        
        echo "✅ CI pipeline passed - proceeding with deployment"
        
    - name: Determine deployment strategy
      id: strategy
      run: |
        echo "🎯 Deployment Strategy Analysis"
        echo "==============================="
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Actor: ${{ github.actor }}"
        echo ""
        
        # Determine environment
        if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
          # Manual dispatch
          environment="${{ github.event.inputs.environment }}"
          deployment_type="manual"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Main branch = production after staging
          environment="production"
          deployment_type="automatic"
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          # Develop branch = staging
          environment="staging"
          deployment_type="automatic"
        else
          # Default to staging for safety
          environment="staging"
          deployment_type="branch"
        fi
        
        # Determine what to deploy
        deploy_infrastructure="true"
        deploy_services="true"
        requires_approval="false"
        
        # Production deployments require approval
        if [[ "$environment" == "production" ]]; then
          requires_approval="true"
          echo "🔒 Production deployment requires approval"
        fi
        
        # Skip infrastructure if no infrastructure changes detected
        if ! git diff --name-only HEAD~1 | grep -E "^(terraform/|k8s/|monitoring/)" && [[ "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
          if [[ "$deployment_type" != "manual" ]]; then
            deploy_infrastructure="false"
            echo "⏭️ No infrastructure changes detected - skipping infrastructure deployment"
          fi
        fi
        
        # Skip services if no service changes detected
        if ! git diff --name-only HEAD~1 | grep -E "^(backend/|frontend/)" && [[ "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
          if [[ "$deployment_type" != "manual" ]]; then
            deploy_services="false"
            echo "⏭️ No service changes detected - skipping service deployment"
          fi
        fi
        
        # Output strategy
        echo "environment=$environment" >> $GITHUB_OUTPUT
        echo "deploy_infrastructure=$deploy_infrastructure" >> $GITHUB_OUTPUT
        echo "deploy_services=$deploy_services" >> $GITHUB_OUTPUT
        echo "requires_approval=$requires_approval" >> $GITHUB_OUTPUT
        echo "deployment_type=$deployment_type" >> $GITHUB_OUTPUT
        
        echo ""
        echo "📊 Deployment Strategy:"
        echo "  Environment: $environment"
        echo "  Deployment type: $deployment_type"
        echo "  Deploy infrastructure: $deploy_infrastructure"
        echo "  Deploy services: $deploy_services"  
        echo "  Requires approval: $requires_approval"

  # ================================================================
  # STAGE 1: INFRASTRUCTURE DEPLOYMENT
  # ================================================================
  
  infrastructure-setup:
    name: 🏗️ Infrastructure Setup
    needs: deployment-strategy
    if: needs.deployment-strategy.outputs.deploy_infrastructure == 'true'
    uses: ./.github/workflows/setup-infrastructure.yml
    with:
      environment: ${{ needs.deployment-strategy.outputs.environment }}
      auto_trigger: true
    secrets: inherit
    
  database-setup:
    name: 🗄️ Database High Availability
    needs: [deployment-strategy, infrastructure-setup]
    if: needs.infrastructure-setup.result == 'success'
    uses: ./.github/workflows/postgres-ha-deployment.yml
    with:
      environment: ${{ needs.deployment-strategy.outputs.environment }}
    secrets: inherit
    
  monitoring-setup:
    name: 📊 Monitoring & Observability
    needs: [deployment-strategy, infrastructure-setup]
    if: needs.infrastructure-setup.result == 'success'
    uses: ./.github/workflows/monitoring-deployment.yml
    with:
      environment: ${{ needs.deployment-strategy.outputs.environment }}
    secrets: inherit

  # ================================================================
  # STAGE 2: PRODUCTION APPROVAL (IF REQUIRED)
  # ================================================================
  
  production-approval:
    name: 🚨 Production Deployment Approval
    needs: [deployment-strategy, infrastructure-setup, database-setup, monitoring-setup]
    if: |
      always() &&
      needs.deployment-strategy.outputs.requires_approval == 'true' &&
      (needs.infrastructure-setup.result == 'success' || needs.infrastructure-setup.result == 'skipped') &&
      (needs.database-setup.result == 'success' || needs.database-setup.result == 'skipped') &&
      (needs.monitoring-setup.result == 'success' || needs.monitoring-setup.result == 'skipped')
    runs-on: ubuntu-latest
    environment: 
      name: production-approval
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      
    steps:
    - name: Request production deployment approval
      run: |
        echo "🚨 PRODUCTION DEPLOYMENT APPROVAL REQUIRED"
        echo "==========================================="
        echo ""
        echo "📊 Deployment Summary:"
        echo "• Environment: ${{ needs.deployment-strategy.outputs.environment }}"
        echo "• Type: ${{ needs.deployment-strategy.outputs.deployment_type }}"
        echo "• Branch: ${{ github.ref_name }}"
        echo "• Commit: ${{ github.sha }}"
        echo "• Author: ${{ github.actor }}"
        echo ""
        echo "✅ Infrastructure Status:"
        echo "• Infrastructure setup: ${{ needs.infrastructure-setup.result }}"
        echo "• Database setup: ${{ needs.database-setup.result }}"
        echo "• Monitoring setup: ${{ needs.monitoring-setup.result }}"
        echo ""
        echo "⚠️  Production Impact:"
        echo "• Zero-downtime deployment with rolling updates"
        echo "• Service account credentials will be rotated if needed"
        echo "• Database migrations will run if present"
        echo ""
        echo "👍 Approve this deployment to proceed to production"

  # ================================================================
  # STAGE 3: APPLICATION DEPLOYMENT
  # ================================================================
  
  application-deployment:
    name: 🚀 Application Deployment
    needs: [deployment-strategy, infrastructure-setup, database-setup, monitoring-setup, production-approval]
    if: |
      always() &&
      needs.deployment-strategy.outputs.deploy_services == 'true' &&
      (needs.infrastructure-setup.result == 'success' || needs.infrastructure-setup.result == 'skipped') &&
      (needs.database-setup.result == 'success' || needs.database-setup.result == 'skipped') &&
      (needs.monitoring-setup.result == 'success' || needs.monitoring-setup.result == 'skipped') &&
      (
        needs.deployment-strategy.outputs.requires_approval == 'false' ||
        needs.production-approval.result == 'success' ||
        needs.production-approval.result == 'skipped'
      )
    uses: ./.github/workflows/progressive-deployment.yml
    with:
      environment: ${{ needs.deployment-strategy.outputs.environment }}
      canary_enabled: ${{ needs.deployment-strategy.outputs.environment == 'production' }}
      auto_promote: ${{ needs.deployment-strategy.outputs.environment != 'production' }}
    secrets: inherit

  # ================================================================
  # STAGE 4: POST-DEPLOYMENT VALIDATION
  # ================================================================
  
  deployment-validation:
    name: ✅ Deployment Validation
    needs: [deployment-strategy, application-deployment]
    if: |
      always() &&
      needs.application-deployment.result == 'success' &&
      github.event.inputs.skip_tests != 'true'
    uses: ./.github/workflows/validation.yml
    with:
      environment: ${{ needs.deployment-strategy.outputs.environment }}
      test_suite: 'smoke'
    secrets: inherit

  # ================================================================
  # STAGE 5: DEPLOYMENT SUMMARY & NOTIFICATIONS
  # ================================================================
  
  deployment-summary:
    name: 📋 Deployment Summary
    needs: [
      deployment-strategy, infrastructure-setup, database-setup, monitoring-setup,
      production-approval, application-deployment, deployment-validation
    ]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Calculate deployment results
      id: results
      run: |
        echo "📊 DEPLOYMENT EXECUTION SUMMARY"
        echo "==============================="
        echo ""
        
        # Collect all job results
        strategy_result="${{ needs.deployment-strategy.result }}"
        infra_result="${{ needs.infrastructure-setup.result }}"
        db_result="${{ needs.database-setup.result }}"
        monitoring_result="${{ needs.monitoring-setup.result }}"
        approval_result="${{ needs.production-approval.result }}"
        deployment_result="${{ needs.application-deployment.result }}"
        validation_result="${{ needs.deployment-validation.result }}"
        
        echo "🎯 Strategy: $strategy_result"
        echo "🏗️ Infrastructure: $infra_result"
        echo "🗄️ Database: $db_result"
        echo "📊 Monitoring: $monitoring_result"
        echo "🚨 Approval: $approval_result"
        echo "🚀 Deployment: $deployment_result"
        echo "✅ Validation: $validation_result"
        echo ""
        
        # Determine overall status
        overall_status="success"
        critical_failures=""
        
        # Strategy is always required
        if [[ "$strategy_result" == "failure" ]]; then
          overall_status="failure"
          critical_failures="$critical_failures strategy"
        fi
        
        # Check infrastructure if it was supposed to run
        if [[ "${{ needs.deployment-strategy.outputs.deploy_infrastructure }}" == "true" ]]; then
          if [[ "$infra_result" == "failure" || "$db_result" == "failure" || "$monitoring_result" == "failure" ]]; then
            overall_status="failure"
            critical_failures="$critical_failures infrastructure"
          fi
        fi
        
        # Check deployment if it was supposed to run
        if [[ "${{ needs.deployment-strategy.outputs.deploy_services }}" == "true" ]]; then
          if [[ "$deployment_result" == "failure" ]]; then
            overall_status="failure"
            critical_failures="$critical_failures deployment"
          fi
        fi
        
        # Validation failure is warning, not critical
        if [[ "$validation_result" == "failure" ]]; then
          echo "⚠️ Post-deployment validation failed but deployment succeeded"
        fi
        
        if [[ "$overall_status" == "success" ]]; then
          echo "🎉 DEPLOYMENT SUCCESS: All stages completed successfully"
          status_emoji="✅"
          status_color="good"
          if [[ "${{ needs.deployment-strategy.outputs.environment }}" == "production" ]]; then
            status_message="🎉 Production deployment completed successfully!"
          else
            status_message="✅ Deployment to ${{ needs.deployment-strategy.outputs.environment }} completed successfully!"
          fi
        else
          echo "❌ DEPLOYMENT FAILURE: Critical stages failed"
          echo "Failed stages: $critical_failures"
          status_emoji="❌"
          status_color="danger"
          status_message="❌ Deployment to ${{ needs.deployment-strategy.outputs.environment }} failed!"
        fi
        
        echo "overall_status=$overall_status" >> $GITHUB_OUTPUT
        echo "status_emoji=$status_emoji" >> $GITHUB_OUTPUT
        echo "status_color=$status_color" >> $GITHUB_OUTPUT
        echo "status_message=$status_message" >> $GITHUB_OUTPUT
        echo "failed_stages=$critical_failures" >> $GITHUB_OUTPUT
        
    - name: Generate deployment report
      run: |
        echo "# 🚀 Deployment Summary Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ needs.deployment-strategy.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Type:** ${{ needs.deployment-strategy.outputs.deployment_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.results.outputs.status_emoji }} ${{ steps.results.outputs.overall_status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Duration:** $(date -d @$(($(date +%s) - ${{ github.run_id }})) -u +%H:%M:%S)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📊 Deployment Stages" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status | Required |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Strategy Planning | ${{ needs.deployment-strategy.result == 'success' && '✅ Success' || '❌ Failed' }} | ✅ Yes |" >> $GITHUB_STEP_SUMMARY
        echo "| Infrastructure Setup | ${{ needs.infrastructure-setup.result == 'success' && '✅ Success' || needs.infrastructure-setup.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | ${{ needs.deployment-strategy.outputs.deploy_infrastructure == 'true' && '✅ Yes' || '⏭️ No' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Database Setup | ${{ needs.database-setup.result == 'success' && '✅ Success' || needs.database-setup.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | ${{ needs.deployment-strategy.outputs.deploy_infrastructure == 'true' && '✅ Yes' || '⏭️ No' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Monitoring Setup | ${{ needs.monitoring-setup.result == 'success' && '✅ Success' || needs.monitoring-setup.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | ${{ needs.deployment-strategy.outputs.deploy_infrastructure == 'true' && '✅ Yes' || '⏭️ No' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Production Approval | ${{ needs.production-approval.result == 'success' && '✅ Approved' || needs.production-approval.result == 'failure' && '❌ Denied' || '⏭️ Not Required' }} | ${{ needs.deployment-strategy.outputs.requires_approval == 'true' && '✅ Yes' || '⏭️ No' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Application Deployment | ${{ needs.application-deployment.result == 'success' && '✅ Success' || needs.application-deployment.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | ${{ needs.deployment-strategy.outputs.deploy_services == 'true' && '✅ Yes' || '⏭️ No' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Post-Deploy Validation | ${{ needs.deployment-validation.result == 'success' && '✅ Passed' || needs.deployment-validation.result == 'failure' && '⚠️ Failed' || '⏭️ Skipped' }} | ⚠️ Optional |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.results.outputs.overall_status }}" == "success" ]]; then
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your application has been successfully deployed to **${{ needs.deployment-strategy.outputs.environment }}**!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.deployment-strategy.outputs.environment }}" == "production" ]]; then
            echo "- 🌐 **Application**: https://link-app.com" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 **Monitoring**: https://grafana.link-app.com" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deployment-strategy.outputs.environment }}" == "staging" ]]; then
            echo "- 🌐 **Application**: https://staging.link-app.com" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 **Monitoring**: https://grafana-staging.link-app.com" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Failed Stages:** ${{ steps.results.outputs.failed_stages }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please review the failed stages and retry the deployment." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Send deployment notification
      if: always()
      uses: ./.github/actions/notify
      with:
        type: ${{ steps.results.outputs.overall_status == 'success' && 'success' || 'failure' }}
        title: 'Deployment Pipeline'
        message: '${{ steps.results.outputs.status_message }}'
        environment: ${{ needs.deployment-strategy.outputs.environment }}
        channels: 'slack'
        workflow_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        details: |
          {
            "commit": "${{ github.sha }}",
            "author": "${{ github.actor }}",
            "branch": "${{ github.ref_name }}",
            "deployment_type": "${{ needs.deployment-strategy.outputs.deployment_type }}",
            "infrastructure_deployed": "${{ needs.deployment-strategy.outputs.deploy_infrastructure }}",
            "services_deployed": "${{ needs.deployment-strategy.outputs.deploy_services }}"
          }

    - name: Fail if deployment failed
      if: steps.results.outputs.overall_status == 'failure'
      run: |
        echo "❌ Deployment pipeline failed"
        exit 1

  # ================================================================
  # EMERGENCY ROLLBACK (TRIGGERED ON CRITICAL FAILURES)
  # ================================================================
  
  emergency-rollback:
    name: 🚨 Emergency Rollback
    needs: [deployment-strategy, application-deployment, deployment-validation]
    if: |
      always() &&
      (
        needs.application-deployment.result == 'failure' ||
        (needs.deployment-validation.result == 'failure' && needs.deployment-strategy.outputs.environment == 'production')
      ) &&
      needs.deployment-strategy.outputs.environment != 'development'
    runs-on: ubuntu-latest
    environment: ${{ needs.deployment-strategy.outputs.environment }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Execute emergency rollback
      run: |
        echo "🚨 EMERGENCY ROLLBACK INITIATED"
        echo "================================"
        echo "Environment: ${{ needs.deployment-strategy.outputs.environment }}"
        echo "Trigger: Critical deployment failure detected"
        echo ""
        
        environment="${{ needs.deployment-strategy.outputs.environment }}"
        
        # This would execute actual rollback procedures
        echo "🔄 Rolling back to previous stable deployment..."
        echo "Command: kubectl rollout undo deployment -n $environment --all"
        echo ""
        echo "✅ Emergency rollback procedures initiated"
        echo "Manual verification and intervention may be required"
        
    - name: Send emergency notification
      if: always()
      uses: ./.github/actions/notify
      with:
        type: 'failure'
        title: '🚨 EMERGENCY ROLLBACK EXECUTED'
        message: 'Critical deployment failure triggered automatic rollback in ${{ needs.deployment-strategy.outputs.environment }}'
        environment: ${{ needs.deployment-strategy.outputs.environment }}
        channels: 'slack,pagerduty'
        workflow_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        details: |
          {
            "severity": "critical",
            "action": "automatic_rollback",
            "environment": "${{ needs.deployment-strategy.outputs.environment }}",
            "commit": "${{ github.sha }}",
            "author": "${{ github.actor }}"
          }