name: Infrastructure (Terraform)

on:
  pull_request:
    paths: 
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  push:
    branches: [main, master]
    paths: 
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9 AM for drift detection
  workflow_dispatch:  # Manual trigger

env:
  TF_VERSION: '1.5.7'  # Match local development version
  TF_WORKING_DIR: './terraform'

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform-validate:
    name: Terraform Validate & Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run comprehensive Terraform validation
        uses: ./.github/actions/terraform-validate
        with:
          terraform-version: ${{ env.TF_VERSION }}
          working-directory: ${{ env.TF_WORKING_DIR }}
          environment: 'development'
          run-plan: 'true'
          plan-only: 'true'
          enable-security-scan: 'true'
          enable-drift-detection: 'false'
          backend-config: 'local'
      
      - name: Upload validation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-validation-reports
          path: |
            ${{ env.TF_WORKING_DIR }}/reports/
          retention-days: 7

  terraform-plan:
    name: Terraform Plan & Analysis
    if: github.event_name == 'pull_request'
    needs: [terraform-validate]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Terraform plan with validation
        id: terraform-plan
        uses: ./.github/actions/terraform-validate
        with:
          terraform-version: ${{ env.TF_VERSION }}
          working-directory: ${{ env.TF_WORKING_DIR }}
          environment: 'development'
          run-plan: 'true'
          plan-only: 'true'
          enable-security-scan: 'true'
          enable-drift-detection: 'false'
          backend-config: 'local'
      
      - name: Save plan and validation results
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.event.pull_request.number }}
          path: |
            ${{ env.TF_WORKING_DIR }}/tfplan.out
            ${{ env.TF_WORKING_DIR }}/reports/
          retention-days: 30
      
      - name: Comment enhanced plan results on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Get plan results from our action
            const planResult = '${{ steps.terraform-plan.outputs.plan-result }}';
            const planExitCode = '${{ steps.terraform-plan.outputs.plan-exit-code }}';
            const validationResult = '${{ steps.terraform-plan.outputs.validation-result }}';
            const securityViolations = '${{ steps.terraform-plan.outputs.security-violations }}';
            
            // Read plan output if available
            let planOutput = 'Plan output not available';
            try {
              planOutput = fs.readFileSync('${{ env.TF_WORKING_DIR }}/reports/plan-output.txt', 'utf8');
            } catch (e) {
              console.log('Plan output file not found, using default message');
            }
            
            // Read security report if available
            let securitySummary = '';
            try {
              securitySummary = fs.readFileSync('${{ env.TF_WORKING_DIR }}/reports/security-summary.md', 'utf8');
            } catch (e) {
              securitySummary = 'Security scan completed - see artifacts for details';
            }
            
            // Determine status
            let status = '‚úÖ No changes';
            let emoji = '‚úÖ';
            if (planExitCode === '1') {
              status = '‚ùå Plan failed';
              emoji = '‚ùå';
            } else if (planExitCode === '2') {
              status = 'üìã Changes detected';
              emoji = 'üìã';
            }
            
            // Create comprehensive comment body
            const body = `## ${emoji} Terraform Plan & Security Analysis
            
            **Plan Status**: ${status}  
            **Validation Result**: ${validationResult}  
            **Security Violations**: ${securityViolations}  
            **Working Directory**: \`${{ env.TF_WORKING_DIR }}\`  
            **Terraform Version**: \`${{ env.TF_VERSION }}\`
            
            ### üîí Security Analysis
            
            <details>
            <summary>üìä Security Scan Results (Click to expand)</summary>
            
            ${securitySummary}
            
            </details>
            
            ### üìã Terraform Plan
            
            <details>
            <summary>üìã View Plan Output (Click to expand)</summary>
            
            \`\`\`hcl
            ${planOutput.length > 8000 ? planOutput.substring(0, 8000) + '\n\n... (truncated, see full output in artifacts)' : planOutput}
            \`\`\`
            
            </details>
            
            ### üìÅ Artifacts Available
            
            Complete analysis results are available as workflow artifacts:
            - **Artifact Name**: \`terraform-plan-${{ github.event.pull_request.number }}\`
            - **Contents**: Plan files, security reports, validation results, documentation
            - **Retention**: 30 days
            
            ### üîç How to Access Results:
            
            1. **GitHub UI**: Actions ‚Üí This workflow run ‚Üí Artifacts
            2. **CLI**: \`gh run download ${{ github.run_id }} --name terraform-plan-${{ github.event.pull_request.number }}\`
            3. **Local Review**: \`terraform show tfplan.out\`
            
            ---
            *Generated by Enhanced Terraform CI/CD Pipeline with Security Analysis*`;
            
            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
      
      - name: Plan Status Check
        if: steps.terraform-plan.outputs.plan-exit-code == '1'
        run: |
          echo "‚ùå Terraform plan failed!"
          exit 1

  terraform-apply:
    name: Terraform Apply with Security Validation
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [terraform-validate]
    runs-on: ubuntu-latest
    environment: production  # Requires manual approval for production changes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Pre-apply security validation
        uses: ./.github/actions/terraform-validate
        with:
          terraform-version: ${{ env.TF_VERSION }}
          working-directory: ${{ env.TF_WORKING_DIR }}
          environment: 'production'
          run-plan: 'true'
          plan-only: 'false'
          enable-security-scan: 'true'
          enable-drift-detection: 'true'
          backend-config: 's3'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}

      - name: Setup Terraform for Apply
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Configure Terraform backend
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Configure S3 backend for production
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            cat > backend-config.tf << EOF
          terraform {
            backend "s3" {
              bucket = "${{ secrets.TF_STATE_BUCKET }}"
              key    = "production/terraform.tfstate"
              region = "us-west-2"
            }
          }
          EOF
          else
            echo "Using local backend for PR validation"
          fi
      
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init
        env:
          # Add these secrets to your GitHub repository
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Create production terraform.tfvars
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          cat > terraform.tfvars << EOF
          postgres_host = "${{ secrets.POSTGRES_HOST }}"
          postgres_password = "${{ secrets.POSTGRES_PASSWORD }}"
          postgres_user = "${{ secrets.POSTGRES_USER }}"
          environment = "production"
          
          # Production settings
          database_connection_limit = 100
          user_connection_limit = 50
          create_monitoring_user = true
          enable_pgbouncer = true
          enable_ssl = true
          backup_retention_days = 30
          
          # Kubernetes settings
          kubernetes_namespace = "link-production"
          kubeconfig_path = "~/.kube/config"
          kubernetes_context = "production-cluster"
          EOF
      
      - name: Terraform Plan (pre-apply)
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -no-color -out=tfplan.out > apply_plan.txt 2>&1
          cat apply_plan.txt
      
      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform apply -auto-approve tfplan.out > apply_output.txt 2>&1
          cat apply_output.txt
      
      - name: Save apply results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terraform-apply-results-${{ github.run_number }}
          path: |
            ${{ env.TF_WORKING_DIR }}/apply_plan.txt
            ${{ env.TF_WORKING_DIR }}/apply_output.txt
            ${{ env.TF_WORKING_DIR }}/terraform.tfstate
          retention-days: 90
      
      - name: Output infrastructure details
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "üéâ Infrastructure deployment complete!"
          echo ""
          echo "üìä Created Resources:"
          terraform output -json | jq -r 'to_entries[] | "- \(.key): \(.value.value // "[sensitive]")"'
      
      - name: Trigger post-deployment validation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'validation.yml',
              ref: 'main',
              inputs: {
                environment: 'production',
                test_suite: 'all'
              }
            });

  terraform-drift-detection:
    name: Terraform Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Check for infrastructure drift
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init
          terraform plan -detailed-exitcode > drift_check.txt 2>&1 || {
            if [ $? -eq 2 ]; then
              echo "üö® Infrastructure drift detected!"
              cat drift_check.txt
              exit 1
            fi
          }
          echo "‚úÖ No infrastructure drift detected"

# Note: Schedule and workflow_dispatch already defined in main on: block above
