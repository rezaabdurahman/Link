name: Frontend CI/CD with Comprehensive Testing

on:
  push:
    branches: [master, main]
    paths: ['frontend/**', '.github/workflows/frontend-ci.yml']
  pull_request:
    branches: [master, main]
    paths: ['frontend/**', '.github/workflows/frontend-ci.yml']

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v2' # Increment to invalidate caches
  FORCE_COLOR: 1 # Better terminal output

concurrency:
  group: frontend-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ====================
  # CODE QUALITY CHECKS
  # ====================
  lint-and-typecheck:
    name: 🔍 Code Quality & Types
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: 🔧 Install dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit
        
      - name: 🧹 Run ESLint
        working-directory: frontend
        run: |
          npm run lint 2>&1 | tee eslint-results.txt
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "❌ ESLint found issues"
            exit 1
          fi
          echo "✅ ESLint passed"
          
      - name: 🔍 Run TypeScript check
        working-directory: frontend
        run: |
          npm run type-check 2>&1 | tee typecheck-results.txt
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "❌ TypeScript check failed"
            exit 1
          fi
          echo "✅ TypeScript check passed"
          
      - name: 📊 Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            frontend/eslint-results.txt
            frontend/typecheck-results.txt
          retention-days: 7

  # ====================
  # UNIT & INTEGRATION TESTS
  # ====================
  unit-tests:
    name: 🧪 Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-type: ['unit', 'integration']
        include:
          - test-type: 'unit'
            test-pattern: '__tests__'
            coverage-threshold: 60
          - test-type: 'integration'
            test-pattern: 'integration'
            coverage-threshold: 40
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: 🔧 Install dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏗️ Setup test environment
        working-directory: frontend
        run: |
          # Create test environment file
          cat > .env.test << EOF
          NODE_ENV=test
          VITE_API_BASE_URL=http://localhost:8080
          VITE_API_URL=http://localhost:8080
          VITE_APP_MODE=test
          VITE_ENABLE_MOCKING=true
          EOF
          
      - name: 🧪 Run ${{ matrix.test-type }} tests
        working-directory: frontend
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            # Run unit tests with coverage
            npx jest \
              --testPathPattern="__tests__" \
              --testPathIgnorePatterns="integration" \
              --coverage \
              --coverageReporters=text \
              --coverageReporters=lcov \
              --coverageReporters=json-summary \
              --setupFilesAfterEnv='<rootDir>/src/setupTests.simple.ts' \
              --maxWorkers=2 \
              --passWithNoTests
          else
            # Run integration tests
            npx jest \
              --testPathPattern="integration" \
              --setupFilesAfterEnv='<rootDir>/src/setupTests.ts' \
              --maxWorkers=1 \
              --passWithNoTests
          fi
          
      - name: 📊 Check coverage thresholds
        if: matrix.test-type == 'unit'
        working-directory: frontend
        run: |
          # Extract coverage percentage from coverage-summary.json
          if [ -f coverage/coverage-summary.json ]; then
            LINES_COVERAGE=$(node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json'));
              console.log(Math.round(coverage.total.lines.pct));
            ")
            
            echo "📊 Coverage: $LINES_COVERAGE%"
            echo "🎯 Required: ${{ matrix.coverage-threshold }}%"
            
            if [ "$LINES_COVERAGE" -ge "${{ matrix.coverage-threshold }}" ]; then
              echo "✅ Coverage requirement met: $LINES_COVERAGE% >= ${{ matrix.coverage-threshold }}%"
            else
              echo "❌ Coverage requirement not met: $LINES_COVERAGE% < ${{ matrix.coverage-threshold }}%"
              echo "::error::Coverage below threshold"
              exit 1
            fi
          else
            echo "⚠️ No coverage report found"
          fi
          
      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            frontend/coverage/
            frontend/jest-results.xml
          retention-days: 7
          
      - name: 📈 Upload coverage to Codecov
        if: matrix.test-type == 'unit' && always()
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend,${{ matrix.test-type }}
          name: frontend-${{ matrix.test-type }}
          fail_ci_if_error: false
          directory: ./frontend
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # ====================
  # E2E TESTS WITH MATRIX
  # ====================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint-and-typecheck, unit-tests]
    
    strategy:
      fail-fast: false
      matrix:
        browser: ['chrome', 'firefox', 'edge']
        test-suite: ['auth', 'discovery', 'core']
        include:
          - test-suite: 'auth'
            spec: 'cypress/e2e/authentication-flow.cy.ts'
          - test-suite: 'discovery'
            spec: 'cypress/e2e/user-discovery.cy.ts'
          - test-suite: 'core'
            spec: 'cypress/e2e/friend-search-in-chat.cy.ts'
        exclude:
          # Only run Firefox and Edge on main test suite to save resources
          - browser: 'firefox'
            test-suite: 'auth'
          - browser: 'firefox'
            test-suite: 'discovery'
          - browser: 'edge'
            test-suite: 'auth'
          - browser: 'edge'
            test-suite: 'discovery'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: 🔧 Install dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏗️ Build application
        working-directory: frontend
        run: npm run build:demo
        
      - name: 🚀 Start dev server
        working-directory: frontend
        run: |
          npm run preview &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
      - name: ⏳ Wait for server
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:4173/health 2>/dev/null || curl -f http://localhost:4173 2>/dev/null; do 
            echo "Waiting for server..."
            sleep 2
          done'
          echo "✅ Server is ready"
          
      - name: 🎭 Run Cypress tests
        working-directory: frontend
        run: |
          npx cypress run \
            --browser ${{ matrix.browser }} \
            --spec "${{ matrix.spec }}" \
            --config video=true,screenshotOnRunFailure=true \
            --reporter junit \
            --reporter-options "mochaFile=cypress/results/results-${{ matrix.browser }}-${{ matrix.test-suite }}.xml"
        env:
          CYPRESS_BASE_URL: http://localhost:4173
          
      - name: 🧹 Cleanup server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi
          
      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}-${{ matrix.test-suite }}
          path: |
            frontend/cypress/screenshots/
            frontend/cypress/videos/
            frontend/cypress/results/
          retention-days: 7
          
      - name: 📋 Upload test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: E2E Tests (${{ matrix.browser }} - ${{ matrix.test-suite }})
          path: frontend/cypress/results/*.xml
          reporter: java-junit
          fail-on-error: false

  # ====================
  # VISUAL REGRESSION TESTS
  # ====================
  visual-tests:
    name: 👀 Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'
    needs: [lint-and-typecheck]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: 🔧 Install dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏗️ Build application
        working-directory: frontend
        run: npm run build:demo
        
      - name: 🚀 Start dev server
        working-directory: frontend
        run: |
          npm run preview &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
      - name: ⏳ Wait for server
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:4173 2>/dev/null; do 
            echo "Waiting for server..."
            sleep 2
          done'
          
      - name: 📸 Run Percy visual tests
        working-directory: frontend
        run: npm run test:visual:ci
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
          PERCY_BRANCH: ${{ github.head_ref }}
          PERCY_TARGET_BRANCH: ${{ github.base_ref }}
          PERCY_PARALLEL_NONCE: ${{ github.run_id }}
          PERCY_PARALLEL_TOTAL: 1
          
      - name: 🧹 Cleanup server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

  # ====================
  # ACCESSIBILITY TESTS
  # ====================
  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint-and-typecheck]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: 🔧 Install dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏗️ Build application
        working-directory: frontend
        run: npm run build:demo
        
      - name: 🚀 Start dev server
        working-directory: frontend
        run: |
          npm run preview &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
      - name: ⏳ Wait for server
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:4173 2>/dev/null; do 
            echo "Waiting for server..."
            sleep 2
          done'
          
      - name: ♿ Run accessibility audit
        working-directory: frontend
        run: |
          # Run axe-core accessibility tests
          npx @axe-core/cli http://localhost:4173 \
            --exit \
            --save axe-results.json \
            --reporter json
            
      - name: 🎨 Run contrast audit
        working-directory: frontend
        run: npm run audit:contrast
        
      - name: 🧹 Cleanup server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi
          
      - name: 📊 Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results
          path: |
            frontend/axe-results.json
            frontend/contrast-audit-results.json
          retention-days: 7

  # ====================
  # PERFORMANCE TESTS
  # ====================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-typecheck]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: 🔧 Install dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏗️ Build production application
        working-directory: frontend
        run: npm run build:production
        
      - name: 🚀 Start production server
        working-directory: frontend
        run: |
          npm run preview &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
      - name: ⏳ Wait for server
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:4173 2>/dev/null; do 
            echo "Waiting for server..."
            sleep 2
          done'
          
      - name: 💡 Run Lighthouse CI
        working-directory: frontend
        run: |
          # Install Lighthouse CI
          npm install -g @lhci/cli@0.12.x
          
          # Run Lighthouse CI
          lhci autorun --config=lighthouse.config.js || true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: 📊 Analyze bundle size
        working-directory: frontend
        run: |
          # Analyze bundle size
          npx webpack-bundle-analyzer dist/assets/*.js --report bundle-report.html --mode static --no-open
          
          # Check bundle size limits
          MAIN_BUNDLE_SIZE=$(stat -f%z dist/assets/index-*.js 2>/dev/null || stat -c%s dist/assets/index-*.js)
          MAIN_BUNDLE_MB=$((MAIN_BUNDLE_SIZE / 1024 / 1024))
          
          echo "📦 Main bundle size: ${MAIN_BUNDLE_MB}MB"
          
          if [ $MAIN_BUNDLE_MB -gt 2 ]; then
            echo "⚠️ Bundle size is large (${MAIN_BUNDLE_MB}MB > 2MB)"
            echo "::warning::Bundle size is larger than recommended"
          else
            echo "✅ Bundle size is acceptable (${MAIN_BUNDLE_MB}MB ≤ 2MB)"
          fi
          
      - name: 🧹 Cleanup server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi
          
      - name: 📊 Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            frontend/.lighthouseci/
            frontend/bundle-report.html
          retention-days: 7

  # ====================
  # BUILD VALIDATION
  # ====================
  build-validation:
    name: 🏗️ Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests]
    
    strategy:
      matrix:
        build-mode: ['demo', 'preview', 'production']
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: 🔧 Install dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏗️ Build (${{ matrix.build-mode }})
        working-directory: frontend
        run: |
          echo "🏗️ Building in ${{ matrix.build-mode }} mode..."
          npm run build:${{ matrix.build-mode }}
          
          # Validate build output
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi
          
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Build failed: index.html not found"
            exit 1
          fi
          
          echo "✅ Build successful for ${{ matrix.build-mode }} mode"
          
      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.build-mode }}-${{ github.sha }}
          path: frontend/dist/
          retention-days: 7

  # ====================
  # SECURITY SCANNING
  # ====================
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: 🔧 Install dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔍 Run npm audit
        working-directory: frontend
        run: |
          echo "🔍 Running npm security audit..."
          npm audit --audit-level=high --format=json > audit-results.json || true
          
          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "📊 High vulnerabilities: $HIGH_VULNS"
          echo "📊 Critical vulnerabilities: $CRITICAL_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found!"
            exit 1
          elif [ "$HIGH_VULNS" -gt 0 ]; then
            echo "⚠️ High vulnerabilities found"
            echo "::warning::High severity vulnerabilities detected"
          else
            echo "✅ No high or critical vulnerabilities found"
          fi
          
      - name: 📊 Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: frontend/audit-results.json
          retention-days: 7

  # ====================
  # NOTIFICATION & REPORTING
  # ====================
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [lint-and-typecheck, unit-tests, e2e-tests, visual-tests, accessibility-tests, performance-tests, build-validation, security-audit]
    
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: 📊 Generate test summary
        run: |
          echo "# 📋 Frontend CI/CD Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status summary
          echo "## 🎯 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & TypeCheck | ${{ needs.lint-and-typecheck.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Tests | ${{ needs.visual-tests.result == 'success' && '✅ Passed' || needs.visual-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | ${{ needs.accessibility-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Validation | ${{ needs.build-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.lint-and-typecheck.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.e2e-tests.result }}" == "success" && 
                ("${{ needs.visual-tests.result }}" == "success" || "${{ needs.visual-tests.result }}" == "skipped") && 
                "${{ needs.accessibility-tests.result }}" == "success" && 
                "${{ needs.performance-tests.result }}" == "success" && 
                "${{ needs.build-validation.result }}" == "success" && 
                "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "## 🎉 Overall Status: ✅ ALL TESTS PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Overall Status: ❌ SOME TESTS FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Artifacts:** Test results, coverage reports, and build outputs are available in the job artifacts." >> $GITHUB_STEP_SUMMARY
          
      - name: 💬 Notify on failure
        if: failure() && github.event_name == 'push'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-alerts'
          text: '❌ Frontend tests failed on main branch'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}