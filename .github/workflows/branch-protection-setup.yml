name: Setup Branch Protection Rules

# This workflow sets up automated branch protection rules
# Run this once to configure your repository for safe automated deployments

on:
  workflow_dispatch:
    inputs:
      github_token:
        description: 'GitHub token with admin privileges (required for branch protection)'
        required: true
        type: string

jobs:
  setup-branch-protection:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Branch Protection for main
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.event.inputs.github_token }}
        script: |
          const { owner, repo } = context.repo;
          
          // Main branch protection (production)
          await github.rest.repos.updateBranchProtection({
            owner,
            repo,
            branch: 'main',
            required_status_checks: {
              strict: true,
              checks: [
                // Core CI/CD Pipeline
                { context: 'CI - Testing & Validation' },
                { context: 'Code Quality & Security' },
                { context: 'Backend Tests' },
                { context: 'Frontend Tests' },
                { context: 'Frontend Quality' },
                { context: 'Unified Testing Suite' },
                
                // Infrastructure & Deployment
                { context: 'validate-and-plan' },
                { context: 'integration-tests-staging' },
                { context: 'deploy-staging' },
                
                // Security Checks (existing workflows)
                { context: 'security-scan' },        // from safety-checks.yml
                { context: 'security-audit' }        // from frontend-quality.yml
              ]
            },
            enforce_admins: false, // Allow admins to bypass in emergencies
            required_pull_request_reviews: {
              required_approving_review_count: 2, // Increase for production
              dismiss_stale_reviews: true,
              require_code_owner_reviews: true,
              require_last_push_approval: true
            },
            restrictions: null, // Allow all users to push (but they need PR approval)
            allow_force_pushes: false,
            allow_deletions: false,
            block_creations: false,
            required_conversation_resolution: true
          });
          
          console.log('‚úÖ Main branch protection configured');

    - name: Setup Branch Protection for develop  
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.event.inputs.github_token }}
        script: |
          const { owner, repo } = context.repo;
          
          // Develop branch protection (staging)
          await github.rest.repos.updateBranchProtection({
            owner,
            repo,
            branch: 'develop',
            required_status_checks: {
              strict: true,
              checks: [
                // Core CI/CD Pipeline
                { context: 'CI - Testing & Validation' },
                { context: 'Code Quality & Security' },
                { context: 'Backend Tests' },
                { context: 'Frontend Tests' },
                { context: 'Frontend Quality' },
                
                // Infrastructure
                { context: 'validate-and-plan' },
                
                // Security (lighter for develop) 
                { context: 'security-scan' },        // from safety-checks.yml
                { context: 'security-audit' }        // from frontend-quality.yml
              ]
            },
            enforce_admins: false,
            required_pull_request_reviews: {
              required_approving_review_count: 1,
              dismiss_stale_reviews: true,
              require_code_owner_reviews: false,
              require_last_push_approval: false
            },
            restrictions: null,
            allow_force_pushes: false,
            allow_deletions: false,
            block_creations: false,
            required_conversation_resolution: true
          });
          
          console.log('‚úÖ Develop branch protection configured');

    - name: Setup Release Branch Protection
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.event.inputs.github_token }}
        script: |
          const { owner, repo } = context.repo;
          
          // Release branch protection (pre-production)
          // Note: GitHub doesn't support wildcard protection via API
          // This would need to be configured manually in GitHub UI for release/* pattern
          console.log('‚ö†Ô∏è Release branch protection (release/*) must be configured manually in GitHub UI');
          console.log('Recommended settings for release/* branches:');
          console.log('- Required status checks: Backend Tests, Frontend Tests, Security Scanning');
          console.log('- Required reviews: 1');
          console.log('- Require code owner reviews: true');

    - name: Setup Hotfix Branch Protection  
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.event.inputs.github_token }}
        script: |
          const { owner, repo } = context.repo;
          
          // Hotfix branch protection (emergency fixes)
          // Note: GitHub doesn't support wildcard protection via API
          console.log('‚ö†Ô∏è Hotfix branch protection (hotfix/*) must be configured manually in GitHub UI');
          console.log('Recommended settings for hotfix/* branches:');
          console.log('- Required status checks: Backend Tests, Frontend Tests, Security Scanning, Critical Tests');
          console.log('- Required reviews: 2 (critical fixes need extra scrutiny)');
          console.log('- Require code owner reviews: true');
          console.log('- Dismiss stale reviews: true');

    - name: Create GitHub Environments
      uses: actions/github-script@v7  
      with:
        github-token: ${{ github.event.inputs.github_token }}
        script: |
          const { owner, repo } = context.repo;
          
          // Production environment with required reviewers
          try {
            await github.rest.repos.createOrUpdateEnvironment({
              owner,
              repo,
              environment_name: 'production',
              wait_timer: 10, // 10 minute delay for production safety
              reviewers: [
                {
                  type: 'Team',
                  id: process.env.GITHUB_TEAM_ID || null // Configure your team ID
                }
              ],
              deployment_branch_policy: {
                protected_branches: true,
                custom_branch_policies: true,
                custom_branches: ['main'] // Only main can deploy to production
              }
            });
            console.log('‚úÖ Production environment configured');
          } catch (error) {
            console.log('Production environment may already exist:', error.message);
          }
          
          // Production approval environment (separate for approval gate)
          try {
            await github.rest.repos.createOrUpdateEnvironment({
              owner,
              repo,
              environment_name: 'production-approval',
              wait_timer: 0,
              reviewers: [
                {
                  type: 'Team', 
                  id: process.env.GITHUB_TEAM_ID || null
                }
              ],
              deployment_branch_policy: {
                protected_branches: true,
                custom_branch_policies: false
              }
            });
            console.log('‚úÖ Production approval environment configured');
          } catch (error) {
            console.log('Production approval environment may already exist:', error.message);
          }
          
          // Staging environment (automatic deployment)
          try {
            await github.rest.repos.createOrUpdateEnvironment({
              owner,
              repo,
              environment_name: 'staging',
              wait_timer: 0,
              reviewers: [],
              deployment_branch_policy: {
                protected_branches: false,
                custom_branch_policies: true,
                custom_branches: ['develop', 'main', 'release/*']
              }
            });
            console.log('‚úÖ Staging environment configured');
          } catch (error) {
            console.log('Staging environment may already exist:', error.message);
          }
          
          // Hotfix approval environment (emergency approvals)
          try {
            await github.rest.repos.createOrUpdateEnvironment({
              owner,
              repo,
              environment_name: 'hotfix-approval',
              wait_timer: 0, // No wait for emergency hotfixes
              reviewers: [
                {
                  type: 'Team',
                  id: process.env.GITHUB_TEAM_ID || null
                }
              ],
              deployment_branch_policy: {
                protected_branches: false,
                custom_branch_policies: true,
                custom_branches: ['hotfix/*'] // Only hotfix branches
              }
            });
            console.log('‚úÖ Hotfix approval environment configured');
          } catch (error) {
            console.log('Hotfix approval environment may already exist:', error.message);
          }

    - name: Enhanced Protection Summary
      run: |
        echo "üéâ Enhanced branch protection and environments configured!"
        echo ""
        echo "‚úÖ Main Branch Protection (Production):"
        echo "  ‚Ä¢ Required approvals: 2 (increased for production safety)"
        echo "  ‚Ä¢ Required status checks: 11 comprehensive checks"
        echo "  ‚Ä¢ Code owner review: Required"
        echo "  ‚Ä¢ Conversation resolution: Required"
        echo "  ‚Ä¢ Includes: CI/CD pipeline, security, infrastructure validation"
        echo ""
        echo "‚úÖ Develop Branch Protection (Staging):"
        echo "  ‚Ä¢ Required approvals: 1"
        echo "  ‚Ä¢ Required status checks: 8 quality checks"
        echo "  ‚Ä¢ More permissive for development velocity"
        echo "  ‚Ä¢ Includes: CI/CD pipeline, security scanning"
        echo ""
        echo "‚úÖ Enhanced Environments:"
        echo "  ‚Ä¢ Production: 10-minute wait + manual approval + main-only deployment"
        echo "  ‚Ä¢ Staging: Automatic deployment from develop/main/release branches"
        echo "  ‚Ä¢ Hotfix-approval: Emergency approvals for hotfix/* branches (no wait time)"
        echo ""
        echo "‚ö†Ô∏è  Manual Configuration Required:"
        echo "  ‚Ä¢ Release branch protection (release/*) - configure in GitHub UI"
        echo "  ‚Ä¢ Hotfix branch protection (hotfix/*) - configure in GitHub UI"
        echo ""
        echo "üìã Next Steps:"
        echo "1. Ensure all 11 status check workflows exist and are properly named"
        echo "2. Configure CODEOWNERS file with team assignments"
        echo "3. Set up GitHub team permissions and GITHUB_TEAM_ID environment variable"
        echo "4. Manually configure release/* and hotfix/* branch protection in GitHub UI"
        echo "5. Test the enhanced protection with a test PR"
        echo "6. ‚úÖ Security workflows already exist (security-scan, security-audit)"
        echo "7. ‚úÖ Hotfix pipeline created - use scripts/hotfix.sh for emergency fixes"