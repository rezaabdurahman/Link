name: CI/CD Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'
  # Test environment variables
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key-for-ci' }}
  SERVICE_AUTH_TOKEN: test-service-token-for-ci

jobs:
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [discovery-svc, search-svc, location-svc]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.service }}-${{ hashFiles(format('backend/{0}/go.sum', matrix.service)) }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.service }}-
          ${{ runner.os }}-go-
    
    - name: Run unit tests for ${{ matrix.service }}
      working-directory: backend/${{ matrix.service }}
      run: |
        go mod tidy
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Check test coverage
      working-directory: backend/${{ matrix.service }}
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Coverage for ${{ matrix.service }}: $COVERAGE%"
        if (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          echo "✅ Coverage requirement met: $COVERAGE% >= 60%"
        else
          echo "❌ Coverage requirement not met: $COVERAGE% < 60%"
          exit 1
        fi
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-${{ matrix.service }}
        path: backend/${{ matrix.service }}/coverage.html

  integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests]
    
    services:
      postgres:
        image: pgvector/pgvector:pg15-v0.5.1
        env:
          POSTGRES_DB: link_app_test
          POSTGRES_USER: link_user
          POSTGRES_PASSWORD: link_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Wait for services
      run: |
        until pg_isready -h localhost -p 5432 -U link_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
    
    - name: Build services
      working-directory: backend
      run: docker-compose build --parallel
    
    - name: Run integration tests
      working-directory: backend
      run: |
        export OPENAI_API_KEY="$OPENAI_API_KEY"
        export SERVICE_AUTH_TOKEN="$SERVICE_AUTH_TOKEN"
        ./integration-tests.sh
      timeout-minutes: 15
    
    - name: Collect service logs on failure
      if: failure()
      working-directory: backend
      run: |
        echo "=== Service Status ==="
        docker-compose ps
        echo "=== API Gateway Logs ==="
        docker-compose logs api-gateway
        echo "=== User Service Logs ==="
        docker-compose logs user-svc
        echo "=== Discovery Service Logs ==="
        docker-compose logs discovery-svc
        echo "=== Search Service Logs ==="
        docker-compose logs search-svc
    
    - name: Cleanup
      if: always()
      working-directory: backend
      run: docker-compose down -v

  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Run TypeScript check
        run: npm run type-check

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Setup test environment
        run: |
          cd frontend
          cp .env.test.example .env.test
        env:
          NODE_ENV: test
      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    needs: [lint-and-typecheck, test, integration-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mode: [demo, preview, production]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build (${{ matrix.mode }})
        run: npm run build:${{ matrix.mode }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.mode }}
          path: frontend/dist
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: npm audit
        run: npm audit --audit-level=high || true

  dependency-review:
    name: Dependency Review (PR only)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  deploy-staging:
    name: Deploy Staging
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: [build, security-audit, integration-tests]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-preview
          path: ./dist
      - name: Deploy to staging
        run: echo "Deploy staging step – add your commands here"

  deploy-production:
    name: Deploy Production
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build, security-audit, integration-tests]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-production
          path: ./dist
      - name: Deploy to production
        run: echo "Deploy production step – add your commands here"
