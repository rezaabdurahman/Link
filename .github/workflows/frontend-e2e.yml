name: Frontend E2E & Visual Tests

# Frontend end-to-end, visual regression, and performance testing
# Split from large frontend-ci.yml for better maintainability

on:
  push:
    branches: [main, develop]
    paths: 
      - 'frontend/**'
      - '.github/workflows/frontend-e2e.yml'
  pull_request:
    branches: [main, develop]
    paths: 
      - 'frontend/**'
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: 'development'
    outputs:
      e2e_status:
        description: 'Overall E2E test status'
        value: ${{ jobs.e2e-summary.outputs.status }}

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v2'
  FORCE_COLOR: 1

concurrency:
  group: frontend-e2e-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ================================================================
  # VISUAL REGRESSION TESTS
  # ================================================================
  
  visual-tests:
    name: 📸 Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for visual regression
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 🗂️ Cache Cypress
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/Cypress
            frontend/node_modules/.cache
          key: ${{ env.CACHE_VERSION }}-cypress-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-cypress-${{ runner.os }}-
          
      - name: 🔧 Install dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-demo
          path: frontend/dist/
        continue-on-error: true
        
      - name: 🏗️ Build if artifacts not available
        if: steps.download.outcome == 'failure'
        working-directory: frontend
        run: |
          echo "Build artifacts not found, building locally..."
          npm run build:demo

      - name: 🌐 Start preview server
        working-directory: frontend
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to start
          sleep 5
          curl -f http://localhost:3000 > /dev/null || (echo "❌ Server failed to start" && exit 1)
          echo "✅ Preview server started"

      - name: 📸 Run visual regression tests
        working-directory: frontend
        run: |
          echo "Running visual regression tests..."
          
          # Check if visual tests are configured
          if npm run test:visual --dry-run >/dev/null 2>&1; then
            # Run visual tests
            npm run test:visual || VISUAL_EXIT_CODE=$?
            
            echo "📸 Visual Test Results:" >> $GITHUB_STEP_SUMMARY
            
            if [ "${VISUAL_EXIT_CODE:-0}" -eq 0 ]; then
              echo "✅ All visual tests passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Visual tests detected changes" >> $GITHUB_STEP_SUMMARY
              echo "Please review the visual differences in the artifacts" >> $GITHUB_STEP_SUMMARY
              
              # Don't fail CI for visual changes in PRs
              if [ "${{ github.event_name }}" == "pull_request" ]; then
                echo "Visual changes detected in PR, but not failing CI"
                VISUAL_EXIT_CODE=0
              fi
            fi
            
            exit ${VISUAL_EXIT_CODE:-0}
          else
            echo "⚠️ No visual regression tests configured"
          fi
        env:
          CYPRESS_baseUrl: http://localhost:3000

      - name: 🛑 Stop preview server
        if: always()
        run: |
          if [ -n "${SERVER_PID:-}" ]; then
            kill $SERVER_PID || true
            echo "Preview server stopped"
          fi

      - name: 📤 Upload visual test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-results
          path: |
            frontend/cypress/screenshots/
            frontend/cypress/videos/
            frontend/cypress/snapshots/
          retention-days: 7

  # ================================================================
  # END-TO-END TESTS
  # ================================================================
  
  e2e-tests:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 🗂️ Cache Playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            frontend/node_modules/.cache
          key: ${{ env.CACHE_VERSION }}-playwright-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-playwright-${{ runner.os }}-
          
      - name: 🔧 Install dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit

      - name: 🎭 Install Playwright browsers
        working-directory: frontend
        run: |
          if npm list playwright >/dev/null 2>&1; then
            npx playwright install --with-deps ${{ matrix.browser }}
          elif npm list cypress >/dev/null 2>&1; then
            echo "Using Cypress for E2E tests"
          else
            echo "No E2E framework detected"
          fi

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-demo
          path: frontend/dist/
        continue-on-error: true
        
      - name: 🏗️ Build if artifacts not available
        if: steps.download.outcome == 'failure'
        working-directory: frontend
        run: |
          echo "Build artifacts not found, building locally..."
          npm run build:demo

      - name: 🌐 Start preview server
        working-directory: frontend
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to start
          sleep 5
          curl -f http://localhost:3000 > /dev/null || (echo "❌ Server failed to start" && exit 1)
          echo "✅ Preview server started"

      - name: 🎭 Run E2E tests
        working-directory: frontend
        run: |
          echo "Running E2E tests with ${{ matrix.browser }}..."
          
          # Determine which E2E framework to use
          if npm list playwright >/dev/null 2>&1; then
            echo "Using Playwright for E2E tests"
            if npm run test:e2e:${{ matrix.browser }} >/dev/null 2>&1; then
              npm run test:e2e:${{ matrix.browser }}
            else
              npm run test:e2e
            fi
          elif npm list cypress >/dev/null 2>&1; then
            echo "Using Cypress for E2E tests"
            if [ "${{ matrix.browser }}" == "chrome" ]; then
              npm run test:e2e:headless
            else
              echo "Skipping ${{ matrix.browser }} for Cypress (Chrome only in CI)"
              exit 0
            fi
          else
            echo "⚠️ No E2E testing framework configured"
            exit 0
          fi
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          CYPRESS_baseUrl: http://localhost:3000

      - name: 🛑 Stop preview server
        if: always()
        run: |
          if [ -n "${SERVER_PID:-}" ]; then
            kill $SERVER_PID || true
            echo "Preview server stopped"
          fi

      - name: 📤 Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            frontend/test-results/
            frontend/playwright-report/
            frontend/cypress/screenshots/
            frontend/cypress/videos/
          retention-days: 7

  # ================================================================
  # PERFORMANCE TESTS
  # ================================================================
  
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 🔧 Install dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: frontend/dist/
        continue-on-error: true
        
      - name: 🏗️ Build production if artifacts not available
        if: steps.download.outcome == 'failure'
        working-directory: frontend
        run: |
          echo "Production build artifacts not found, building locally..."
          npm run build:production

      - name: 🌐 Start preview server
        working-directory: frontend
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to start
          sleep 5
          curl -f http://localhost:3000 > /dev/null || (echo "❌ Server failed to start" && exit 1)
          echo "✅ Preview server started"

      - name: 🚀 Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: ⚡ Run Lighthouse audit
        run: |
          echo "Running Lighthouse performance audit..."
          
          lhci autorun \
            --upload.target=temporary-public-storage \
            --collect.url=http://localhost:3000 \
            --collect.numberOfRuns=3 \
            --collect.settings.chromeFlags="--headless --no-sandbox --disable-dev-shm-usage" \
            --assert.assertions.categories.performance=0.7 \
            --assert.assertions.categories.accessibility=0.9 \
            --assert.assertions.categories.seo=0.8 \
            --assert.assertions.categories.pwa=0.6 || LIGHTHOUSE_EXIT_CODE=$?
          
          echo "⚡ Performance Test Results:" >> $GITHUB_STEP_SUMMARY
          
          if [ -f ".lighthouseci/lhr-*.json" ]; then
            # Extract scores from Lighthouse results
            performance=$(jq '.categories.performance.score * 100' .lighthouseci/lhr-*.json | head -1)
            accessibility=$(jq '.categories.accessibility.score * 100' .lighthouseci/lhr-*.json | head -1)
            seo=$(jq '.categories.seo.score * 100' .lighthouseci/lhr-*.json | head -1)
            pwa=$(jq '.categories.pwa.score * 100' .lighthouseci/lhr-*.json | head -1)
            
            echo "| Category | Score |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Performance | ${performance}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Accessibility | ${accessibility}% |" >> $GITHUB_STEP_SUMMARY
            echo "| SEO | ${seo}% |" >> $GITHUB_STEP_SUMMARY
            echo "| PWA | ${pwa}% |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Don't fail CI for performance scores yet
          if [ "${LIGHTHOUSE_EXIT_CODE:-0}" -ne 0 ]; then
            echo "⚠️ Performance audit failed targets, but not failing CI"
          else
            echo "✅ Performance audit passed"
          fi

      - name: 🛑 Stop preview server
        if: always()
        run: |
          if [ -n "${SERVER_PID:-}" ]; then
            kill $SERVER_PID || true
            echo "Preview server stopped"
          fi

      - name: 📤 Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: |
            .lighthouseci/
          retention-days: 7

  # ================================================================
  # E2E TEST SUMMARY
  # ================================================================
  
  e2e-summary:
    name: 📋 E2E Test Summary
    runs-on: ubuntu-latest
    needs: [visual-tests, e2e-tests, performance-tests]
    if: always()
    outputs:
      status: ${{ steps.summary.outputs.status }}
    
    steps:
      - name: 📊 Generate E2E summary
        id: summary
        run: |
          echo "# 🎭 Frontend E2E Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          visual_result="${{ needs.visual-tests.result }}"
          e2e_result="${{ needs.e2e-tests.result }}"
          performance_result="${{ needs.performance-tests.result }}"
          
          echo "## 📊 Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Regression | $visual_result |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | $e2e_result |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | $performance_result |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status (only E2E failures block CI)
          if [[ "$e2e_result" == "success" ]]; then
            echo "## ✅ Overall Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "Critical E2E tests passed!" >> $GITHUB_STEP_SUMMARY
            
            # Warnings for non-critical failures
            if [[ "$visual_result" == "failure" ]]; then
              echo "⚠️ Note: Visual tests detected changes" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "$performance_result" == "failure" ]]; then
              echo "⚠️ Note: Performance audit didn't meet targets" >> $GITHUB_STEP_SUMMARY
            fi
            
            overall_status="success"
          else
            echo "## ❌ Overall Status: FAILURE" >> $GITHUB_STEP_SUMMARY
            echo "Critical E2E tests failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
            overall_status="failure"
          fi
          
          echo "status=$overall_status" >> $GITHUB_OUTPUT
          
      - name: ❌ Fail if critical E2E tests failed
        if: steps.summary.outputs.status == 'failure'
        run: |
          echo "Critical frontend E2E tests failed"
          exit 1