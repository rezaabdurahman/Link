name: Setup Production Secrets

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      setup_database_secrets:
        description: 'Setup database secrets'
        required: true
        default: true
        type: boolean
      setup_sentry_secrets:
        description: 'Setup Sentry secrets (requires manual DSN input)'
        required: true
        default: false
        type: boolean
      force_update:
        description: 'Force update existing secrets'
        required: true
        default: false
        type: boolean

env:
  AWS_REGION: us-west-2
  
permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required to read repository contents

jobs:
  setup-secrets:
    name: Setup Production Secrets
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-SetupSecrets
        
    - name: Verify AWS Access
      run: |
        echo "Current AWS identity:"
        aws sts get-caller-identity
        echo "Testing Secrets Manager access:"
        aws secretsmanager list-secrets --region ${{ env.AWS_REGION }} --max-results 1
    
    - name: Setup Database Secrets
      if: ${{ github.event.inputs.setup_database_secrets == 'true' }}
      run: |
        echo "🔐 Setting up database secrets for ${{ github.event.inputs.environment }}"
        
        # Check if running in force update mode
        if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
          echo "⚠️  Force update mode enabled - will overwrite existing secrets"
          export FORCE_UPDATE=true
        fi
        
        # Run the database secrets setup script
        ./scripts/setup-database-secrets.sh "${{ github.event.inputs.environment }}"
        
        echo "✅ Database secrets setup completed"
    
    - name: Setup Application Secrets
      run: |
        echo "🔐 Setting up application secrets (JWT, encryption keys) for ${{ github.event.inputs.environment }}"
        
        # Check if running in force update mode
        if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
          echo "⚠️  Force update mode enabled - will overwrite existing secrets"
          export FORCE_UPDATE=true
        fi
        
        # Run the application secrets setup script
        ./scripts/setup-application-secrets.sh "${{ github.event.inputs.environment }}"
        
        echo "✅ Application secrets setup completed"
        
    - name: Setup Sentry Secrets
      if: ${{ github.event.inputs.setup_sentry_secrets == 'true' }}
      run: |
        echo "🔐 Setting up Sentry secrets for ${{ github.event.inputs.environment }}"
        echo "⚠️  Note: This step requires manual DSN input and should be run locally"
        echo "Run: ./scripts/setup-sentry-secrets.sh ${{ github.event.inputs.environment }}"
        echo "Or set up DSNs in AWS Secrets Manager manually:"
        echo "Secret: link-app/observability/sentry"
        
        # Create placeholder if secrets don't exist
        SECRET_NAME="link-app/observability/sentry"
        if ! aws secretsmanager describe-secret --secret-id "$SECRET_NAME" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "Creating placeholder Sentry secret (needs manual update with real DSNs)"
          aws secretsmanager create-secret \
            --name "$SECRET_NAME" \
            --description "Sentry configuration for Link application - PLACEHOLDER" \
            --secret-string '{
              "backend_dsn": "PLACEHOLDER_NEEDS_REAL_DSN",
              "frontend_dsn": "PLACEHOLDER_NEEDS_REAL_DSN", 
              "environment": "${{ github.event.inputs.environment }}",
              "organization": "PLACEHOLDER_ORG",
              "backend_project": "link-backend",
              "frontend_project": "link-frontend",
              "auth_token": "",
              "release": "unknown"
            }' \
            --region ${{ env.AWS_REGION }}
          echo "❌ PLACEHOLDER created - Update with real Sentry DSNs before deployment!"
        fi
        
    - name: Verify Secrets
      run: |
        echo "🔍 Verifying created secrets..."
        
        # Check database secrets
        if aws secretsmanager describe-secret --secret-id "link-app/database/postgres" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "✅ Database secrets exist"
          # Don't show actual values for security
          aws secretsmanager describe-secret --secret-id "link-app/database/postgres" --region ${{ env.AWS_REGION }} --query 'Description'
        else
          echo "❌ Database secrets not found"
        fi
        
        # Check Sentry secrets  
        if aws secretsmanager describe-secret --secret-id "link-app/observability/sentry" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "✅ Sentry secrets exist"
          aws secretsmanager describe-secret --secret-id "link-app/observability/sentry" --region ${{ env.AWS_REGION }} --query 'Description'
        else
          echo "❌ Sentry secrets not found"
        fi
        
    - name: Summary
      run: |
        echo "## 🎉 Secrets Setup Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Environment: **${{ github.event.inputs.environment }}**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Created/Updated Secrets:" >> $GITHUB_STEP_SUMMARY
        echo "- 🗄️  \`link-app/database/postgres\` - Database passwords" >> $GITHUB_STEP_SUMMARY
        echo "- 👀 \`link-app/observability/sentry\` - Sentry configuration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. 🔧 Apply External Secrets: \`kubectl apply -f k8s/secrets/\`" >> $GITHUB_STEP_SUMMARY
        echo "2. 🔍 Verify secret sync: \`kubectl get secrets -n link-services\`" >> $GITHUB_STEP_SUMMARY
        echo "3. 🚀 Deploy updated configurations" >> $GITHUB_STEP_SUMMARY
        echo "4. ⚠️  **Update Sentry DSNs** if using placeholders" >> $GITHUB_STEP_SUMMARY