name: 'Docker Build with Advanced Caching'
description: 'Build Docker images with multi-layer caching, registry cache, and BuildKit optimization'

inputs:
  context:
    description: 'Build context directory'
    required: false
    default: '.'
  dockerfile:
    description: 'Path to Dockerfile'
    required: false
    default: 'Dockerfile'
  image-name:
    description: 'Docker image name'
    required: true
  image-tag:
    description: 'Docker image tag'
    required: false
    default: 'latest'
  registry:
    description: 'Container registry URL'
    required: false
    default: 'ghcr.io'
  push:
    description: 'Push image to registry'
    required: false
    default: 'true'
  cache-from:
    description: 'Additional cache sources (comma-separated)'
    required: false
    default: ''
  cache-to:
    description: 'Cache export targets (comma-separated)'
    required: false
    default: ''
  build-args:
    description: 'Docker build arguments (multiline or comma-separated)'
    required: false
    default: ''
  platforms:
    description: 'Target platforms for multi-arch builds'
    required: false
    default: 'linux/amd64'
  cache-mode:
    description: 'Cache mode: registry, local, or gha'
    required: false
    default: 'registry'

outputs:
  image-digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}
  image-url:
    description: 'Full image URL with digest'
    value: ${{ steps.build.outputs.image-url }}
  cache-hit:
    description: 'Whether cache was hit'
    value: ${{ steps.cache-check.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        driver-opts: |
          network=host
          image=moby/buildkit:buildx-stable-1
        buildkitd-flags: |
          --allow-insecure-entitlement security.insecure
          --allow-insecure-entitlement network.host
        install: true

    - name: Configure build variables
      id: vars
      shell: bash
      run: |
        echo "Setting up build variables..."
        
        # Image name and tag
        IMAGE_NAME="${{ inputs.image-name }}"
        IMAGE_TAG="${{ inputs.image-tag }}"
        REGISTRY="${{ inputs.registry }}"
        
        # Full image reference
        if [[ "$REGISTRY" != "" ]]; then
          FULL_IMAGE="$REGISTRY/$IMAGE_NAME:$IMAGE_TAG"
          CACHE_IMAGE="$REGISTRY/$IMAGE_NAME:buildcache"
        else
          FULL_IMAGE="$IMAGE_NAME:$IMAGE_TAG"
          CACHE_IMAGE="$IMAGE_NAME:buildcache"
        fi
        
        # Cache configuration
        CACHE_FROM=""
        CACHE_TO=""
        
        case "${{ inputs.cache-mode }}" in
          "registry")
            CACHE_FROM="type=registry,ref=$CACHE_IMAGE"
            if [[ "${{ inputs.push }}" == "true" ]]; then
              CACHE_TO="type=registry,ref=$CACHE_IMAGE,mode=max"
            fi
            ;;
          "gha")
            CACHE_FROM="type=gha,scope=${{ github.workflow }}-$IMAGE_NAME"
            CACHE_TO="type=gha,scope=${{ github.workflow }}-$IMAGE_NAME,mode=max"
            ;;
          "local")
            CACHE_FROM="type=local,src=/tmp/.buildx-cache"
            CACHE_TO="type=local,dest=/tmp/.buildx-cache-new,mode=max"
            ;;
        esac
        
        # Add additional cache sources
        if [[ "${{ inputs.cache-from }}" != "" ]]; then
          CACHE_FROM="$CACHE_FROM,${{ inputs.cache-from }}"
        fi
        
        # Add additional cache targets
        if [[ "${{ inputs.cache-to }}" != "" ]]; then
          CACHE_TO="$CACHE_TO,${{ inputs.cache-to }}"
        fi
        
        # Output variables
        echo "full-image=$FULL_IMAGE" >> $GITHUB_OUTPUT
        echo "cache-image=$CACHE_IMAGE" >> $GITHUB_OUTPUT
        echo "cache-from=$CACHE_FROM" >> $GITHUB_OUTPUT
        echo "cache-to=$CACHE_TO" >> $GITHUB_OUTPUT
        
        echo "üìä Build Configuration:"
        echo "  Image: $FULL_IMAGE"
        echo "  Cache mode: ${{ inputs.cache-mode }}"
        echo "  Cache from: $CACHE_FROM"
        echo "  Cache to: $CACHE_TO"
        echo "  Platforms: ${{ inputs.platforms }}"

    - name: Check cache availability
      id: cache-check
      shell: bash
      run: |
        echo "üîç Checking cache availability..."
        
        cache_available="false"
        
        if [[ "${{ inputs.cache-mode }}" == "registry" ]]; then
          # Check if cache image exists in registry
          if docker buildx imagetools inspect "${{ steps.vars.outputs.cache-image }}" > /dev/null 2>&1; then
            cache_available="true"
            echo "‚úÖ Registry cache found: ${{ steps.vars.outputs.cache-image }}"
          else
            echo "‚ÑπÔ∏è No registry cache found, will build from scratch"
          fi
        elif [[ "${{ inputs.cache-mode }}" == "local" ]]; then
          # Check if local cache directory exists
          if [[ -d "/tmp/.buildx-cache" ]]; then
            cache_available="true"
            echo "‚úÖ Local cache found: /tmp/.buildx-cache"
          else
            echo "‚ÑπÔ∏è No local cache found, will build from scratch"
          fi
        else
          # GHA cache is handled automatically
          cache_available="true"
          echo "‚ÑπÔ∏è Using GitHub Actions cache"
        fi
        
        echo "cache-hit=$cache_available" >> $GITHUB_OUTPUT

    - name: Restore local cache
      if: inputs.cache-mode == 'local'
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ inputs.image-name }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ inputs.image-name }}-
          ${{ runner.os }}-buildx-

    - name: Parse build arguments
      id: build-args
      shell: bash
      run: |
        echo "üìù Parsing build arguments..."
        
        BUILD_ARGS=""
        if [[ "${{ inputs.build-args }}" != "" ]]; then
          # Handle multiline build args
          while IFS= read -r line; do
            if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
              BUILD_ARGS="$BUILD_ARGS --build-arg $line"
            fi
          done <<< "${{ inputs.build-args }}"
          
          echo "Build arguments: $BUILD_ARGS"
        fi
        
        echo "args=$BUILD_ARGS" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: ${{ inputs.push }}
        tags: ${{ steps.vars.outputs.full-image }}
        platforms: ${{ inputs.platforms }}
        cache-from: ${{ steps.vars.outputs.cache-from }}
        cache-to: ${{ steps.vars.outputs.cache-to }}
        build-args: ${{ inputs.build-args }}
        outputs: type=image,name=${{ steps.vars.outputs.full-image }},push=${{ inputs.push }}
        provenance: false  # Disable provenance for faster builds
        sbom: false       # Disable SBOM for faster builds

    - name: Move local cache
      if: inputs.cache-mode == 'local'
      shell: bash
      run: |
        # Replace old cache with new cache
        if [[ -d "/tmp/.buildx-cache-new" ]]; then
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          echo "‚úÖ Local cache updated"
        fi

    - name: Generate build summary
      shell: bash
      run: |
        echo "üìä Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "======================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ steps.vars.outputs.full-image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Cache Mode:** ${{ inputs.cache-mode }}" >> $GITHUB_STEP_SUMMARY
        echo "**Cache Hit:** ${{ steps.cache-check.outputs.cache-hit == 'true' && '‚úÖ Yes' || '‚ùå No' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms:** ${{ inputs.platforms }}" >> $GITHUB_STEP_SUMMARY
        echo "**Pushed:** ${{ inputs.push == 'true' && '‚úÖ Yes' || '‚ùå No' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ inputs.push }}" == "true" ]]; then
          echo "üê≥ **Pull Command:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.vars.outputs.full-image }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Output image URL
      id: output
      shell: bash
      run: |
        if [[ "${{ steps.build.outputs.digest }}" != "" ]]; then
          IMAGE_URL="${{ steps.vars.outputs.full-image }}@${{ steps.build.outputs.digest }}"
        else
          IMAGE_URL="${{ steps.vars.outputs.full-image }}"
        fi
        
        echo "image-url=$IMAGE_URL" >> $GITHUB_OUTPUT
        echo "‚úÖ Build completed successfully: $IMAGE_URL"